// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class MicrosoftGraphClient : ServiceClient<MicrosoftGraphClient>, IMicrosoftGraphClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Initializes a new instance of the MicrosoftGraphClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling MicrosoftGraphClient.Dispose(). False: will not dispose provided httpClient</param>
        public MicrosoftGraphClient(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the MicrosoftGraphClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public MicrosoftGraphClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the MicrosoftGraphClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public MicrosoftGraphClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the MicrosoftGraphClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public MicrosoftGraphClient(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the MicrosoftGraphClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public MicrosoftGraphClient(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            BaseUri = new System.Uri("http://localhost");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }
        /// <summary>
        /// Get Schedule
        /// </summary>
        /// <remarks>
        /// Retrieve the properties and relationships of a schedule object.
        /// </remarks>
        /// <param name='teamId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<ScheduleResponse>> GetScheduleWithHttpMessagesAsync(string teamId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (teamId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "teamId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("teamId", teamId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetSchedule", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "teams/{teamId}/schedule").ToString();
            _url = _url.Replace("{teamId}", System.Uri.EscapeDataString(teamId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<ScheduleResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<ScheduleResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Create or Replace Schedule
        /// </summary>
        /// <remarks>
        /// Create or replace a schedule object.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='teamId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<ScheduleResponse>> CreateReplaceScheduleWithHttpMessagesAsync(ScheduleRequest body, string teamId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (body == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "body");
            }
            if (teamId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "teamId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("body", body);
                tracingParameters.Add("teamId", teamId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "CreateReplaceSchedule", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "teams/{teamId}/schedule").ToString();
            _url = _url.Replace("{teamId}", System.Uri.EscapeDataString(teamId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(body != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(body, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, System.Text.Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 204)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<ScheduleResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<ScheduleResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// List Scheduling Groups
        /// </summary>
        /// <remarks>
        /// Get the list of schedulingGroups in this schedule.
        /// </remarks>
        /// <param name='teamId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<SchedulingGroupCollectionResponse>> ListSchedulingGroupsWithHttpMessagesAsync(string teamId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (teamId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "teamId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("teamId", teamId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "ListSchedulingGroups", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "teams/{teamId}/schedule/schedulingGroups").ToString();
            _url = _url.Replace("{teamId}", System.Uri.EscapeDataString(teamId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<SchedulingGroupCollectionResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<SchedulingGroupCollectionResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Create Scheduling Group
        /// </summary>
        /// <remarks>
        /// Create a new schedulingGroup.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='teamId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> CreateSchedulingGroupWithHttpMessagesAsync(SchedulingGroupRequest body, string teamId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (body == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "body");
            }
            if (teamId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "teamId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("body", body);
                tracingParameters.Add("teamId", teamId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "CreateSchedulingGroup", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "teams/{teamId}/schedule/schedulingGroups").ToString();
            _url = _url.Replace("{teamId}", System.Uri.EscapeDataString(teamId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(body != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(body, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, System.Text.Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 201 && (int)_statusCode != 400)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 201)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<SchedulingGroupResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 400)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<GraphErrorContainer>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Scheduling Group
        /// </summary>
        /// <remarks>
        /// Retrieves the properties and relationships of a schedulingGroup by ID.
        /// </remarks>
        /// <param name='teamId'>
        /// </param>
        /// <param name='schedulingGroupId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<SchedulingGroupResponse>> GetSchedulingGroupWithHttpMessagesAsync(string teamId, string schedulingGroupId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (teamId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "teamId");
            }
            if (schedulingGroupId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "schedulingGroupId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("teamId", teamId);
                tracingParameters.Add("schedulingGroupId", schedulingGroupId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetSchedulingGroup", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "teams/{teamId}/schedule/schedulingGroups/{schedulingGroupId}").ToString();
            _url = _url.Replace("{teamId}", System.Uri.EscapeDataString(teamId));
            _url = _url.Replace("{schedulingGroupId}", System.Uri.EscapeDataString(schedulingGroupId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<SchedulingGroupResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<SchedulingGroupResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Replace Scheduling Group
        /// </summary>
        /// <remarks>
        /// Replace an existing schedulingGroup.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='ifMatch'>
        /// The etag for concurrency control
        /// </param>
        /// <param name='teamId'>
        /// </param>
        /// <param name='schedulingGroupId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> ReplaceSchedulingGroupWithHttpMessagesAsync(SchedulingGroupResponse body, string ifMatch, string teamId, string schedulingGroupId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (body == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "body");
            }
            if (ifMatch == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ifMatch");
            }
            if (teamId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "teamId");
            }
            if (schedulingGroupId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "schedulingGroupId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("body", body);
                tracingParameters.Add("ifMatch", ifMatch);
                tracingParameters.Add("teamId", teamId);
                tracingParameters.Add("schedulingGroupId", schedulingGroupId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "ReplaceSchedulingGroup", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "teams/{teamId}/schedule/schedulingGroups/{schedulingGroupId}").ToString();
            _url = _url.Replace("{teamId}", System.Uri.EscapeDataString(teamId));
            _url = _url.Replace("{schedulingGroupId}", System.Uri.EscapeDataString(schedulingGroupId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (ifMatch != null)
            {
                if (_httpRequest.Headers.Contains("If-Match"))
                {
                    _httpRequest.Headers.Remove("If-Match");
                }
                _httpRequest.Headers.TryAddWithoutValidation("If-Match", ifMatch);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(body != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(body, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, System.Text.Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 204 && (int)_statusCode != 400)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<SchedulingGroupResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 400)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<GraphErrorContainer>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Delete Scheduling Group
        /// </summary>
        /// <remarks>
        /// Mark a schedulingGroup as inactive by setting its isActive property. This
        /// method does not remove the schedulingGroup from the schedule. Existing
        /// shift instances assigned to the scheduling group remain part of the group.
        /// </remarks>
        /// <param name='teamId'>
        /// </param>
        /// <param name='schedulingGroupId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> DeleteSchedulingGroupWithHttpMessagesAsync(string teamId, string schedulingGroupId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (teamId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "teamId");
            }
            if (schedulingGroupId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "schedulingGroupId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("teamId", teamId);
                tracingParameters.Add("schedulingGroupId", schedulingGroupId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "DeleteSchedulingGroup", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "teams/{teamId}/schedule/schedulingGroups/{schedulingGroupId}").ToString();
            _url = _url.Replace("{teamId}", System.Uri.EscapeDataString(teamId));
            _url = _url.Replace("{schedulingGroupId}", System.Uri.EscapeDataString(schedulingGroupId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("DELETE");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 204)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// List Shifts
        /// </summary>
        /// <remarks>
        /// Get the list of shift instances in a schedule.
        /// </remarks>
        /// <param name='filter'>
        /// ODATA filter parameter to limit the shifts returned.
        /// </param>
        /// <param name='teamId'>
        /// </param>
        /// <param name='top'>
        /// The number of shifts to fetch (if not specified this defaults to 100)
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<ShiftCollectionResponse>> ListShiftsWithHttpMessagesAsync(string filter, string teamId, int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (filter == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "filter");
            }
            if (teamId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "teamId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("filter", filter);
                tracingParameters.Add("top", top);
                tracingParameters.Add("teamId", teamId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "ListShifts", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "teams/{teamId}/schedule/shifts").ToString();
            _url = _url.Replace("{teamId}", System.Uri.EscapeDataString(teamId));
            List<string> _queryParameters = new List<string>();
            if (filter != null)
            {
                _queryParameters.Add(string.Format("$filter={0}", System.Uri.EscapeDataString(filter)));
            }
            if (top != null)
            {
                _queryParameters.Add(string.Format("$top={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(top, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<ShiftCollectionResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<ShiftCollectionResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Create Shift
        /// </summary>
        /// <remarks>
        /// Create a new shift instance in a schedule.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='teamId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> CreateShiftWithHttpMessagesAsync(ShiftRequest body, string teamId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (body == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "body");
            }
            if (teamId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "teamId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("body", body);
                tracingParameters.Add("teamId", teamId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "CreateShift", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "teams/{teamId}/schedule/shifts").ToString();
            _url = _url.Replace("{teamId}", System.Uri.EscapeDataString(teamId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(body != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(body, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, System.Text.Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 201 && (int)_statusCode != 400)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 201)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<ShiftResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 400)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<GraphErrorContainer>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Shift
        /// </summary>
        /// <remarks>
        /// etrieve the properties and relationships of a shift object by ID.
        /// </remarks>
        /// <param name='teamId'>
        /// </param>
        /// <param name='shiftId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<ShiftResponse>> GetShiftWithHttpMessagesAsync(string teamId, string shiftId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (teamId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "teamId");
            }
            if (shiftId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "shiftId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("teamId", teamId);
                tracingParameters.Add("shiftId", shiftId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetShift", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "teams/{teamId}/schedule/shifts/{shiftId}").ToString();
            _url = _url.Replace("{teamId}", System.Uri.EscapeDataString(teamId));
            _url = _url.Replace("{shiftId}", System.Uri.EscapeDataString(shiftId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<ShiftResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<ShiftResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Replace Shift
        /// </summary>
        /// <remarks>
        /// Replace an existing shift.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='teamId'>
        /// </param>
        /// <param name='shiftId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> ReplaceShiftWithHttpMessagesAsync(ShiftResponse body, string teamId, string shiftId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (body == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "body");
            }
            if (teamId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "teamId");
            }
            if (shiftId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "shiftId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("body", body);
                tracingParameters.Add("teamId", teamId);
                tracingParameters.Add("shiftId", shiftId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "ReplaceShift", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "teams/{teamId}/schedule/shifts/{shiftId}").ToString();
            _url = _url.Replace("{teamId}", System.Uri.EscapeDataString(teamId));
            _url = _url.Replace("{shiftId}", System.Uri.EscapeDataString(shiftId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(body != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(body, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, System.Text.Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 204 && (int)_statusCode != 400)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<ShiftResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 400)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<GraphErrorContainer>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Delete Shift
        /// </summary>
        /// <remarks>
        /// Deletes a shift from the schedule.
        /// </remarks>
        /// <param name='teamId'>
        /// </param>
        /// <param name='shiftId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> DeleteShiftWithHttpMessagesAsync(string teamId, string shiftId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (teamId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "teamId");
            }
            if (shiftId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "shiftId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("teamId", teamId);
                tracingParameters.Add("shiftId", shiftId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "DeleteShift", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "teams/{teamId}/schedule/shifts/{shiftId}").ToString();
            _url = _url.Replace("{teamId}", System.Uri.EscapeDataString(teamId));
            _url = _url.Replace("{shiftId}", System.Uri.EscapeDataString(shiftId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("DELETE");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 204)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get User
        /// </summary>
        /// <remarks>
        /// Retrieve the properties and relationships of user object.
        /// </remarks>
        /// <param name='upn'>
        /// The user principle name e.g. user@appsource.onmicrosoft.com
        /// </param>
        /// <param name='select'>
        /// To map the Get result to an IdentityResponse, this should be set to
        /// id,displayName
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IdentityResponse>> GetUserByUpnWithHttpMessagesAsync(string upn, string select = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (upn == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "upn");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("upn", upn);
                tracingParameters.Add("select", select);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetUserByUpn", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "users/{upn}").ToString();
            _url = _url.Replace("{upn}", System.Uri.EscapeDataString(upn));
            List<string> _queryParameters = new List<string>();
            if (select != null)
            {
                _queryParameters.Add(string.Format("$select={0}", System.Uri.EscapeDataString(select)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IdentityResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IdentityResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Share Schedule
        /// </summary>
        /// <remarks>
        /// Shares a schedule time range with schedule members. Make the collections of
        /// shift and timeOff items in the specified time range of the schedule
        /// viewable by the specified team members, including employees and managers.
        /// Each shift and timeOff instance in a schedule supports a draft version and
        /// a shared version of the item. The draft version is viewable by only
        /// managers, and the shared version is viewable by employees and managers. For
        /// each shift and timeOff instance in the specified time range, the share
        /// action updates the shared version from the draft version, so that in
        /// addition to managers, employees can also view the most current information
        /// about the item. The notifyTeam parameter further specifies which employees
        /// can view the item.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='teamId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> ShareScheduleWithHttpMessagesAsync(ShareRequest body, string teamId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (body == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "body");
            }
            if (teamId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "teamId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("body", body);
                tracingParameters.Add("teamId", teamId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "ShareSchedule", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "teams/{teamId}/schedule/share").ToString();
            _url = _url.Replace("{teamId}", System.Uri.EscapeDataString(teamId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(body != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(body, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, System.Text.Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 204)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Members
        /// </summary>
        /// <remarks>
        /// Get a list of the group's direct members. A group can have users, contacts,
        /// devices, service principals, and other groups as members. This operation is
        /// not transitive.
        /// </remarks>
        /// <param name='teamId'>
        /// </param>
        /// <param name='select'>
        /// To map the Get result to an IdentityResponse, this should be set to
        /// id,displayName
        /// </param>
        /// <param name='top'>
        /// The number of users to return (max supported 999)
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<MembersResponse>> GetMembersWithHttpMessagesAsync(string teamId, string select = default(string), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (teamId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "teamId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("teamId", teamId);
                tracingParameters.Add("select", select);
                tracingParameters.Add("top", top);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetMembers", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "groups/{teamId}/members").ToString();
            _url = _url.Replace("{teamId}", System.Uri.EscapeDataString(teamId));
            List<string> _queryParameters = new List<string>();
            if (select != null)
            {
                _queryParameters.Add(string.Format("$select={0}", System.Uri.EscapeDataString(select)));
            }
            if (top != null)
            {
                _queryParameters.Add(string.Format("$top={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(top, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<MembersResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<MembersResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Team
        /// </summary>
        /// <remarks>
        /// Gets the team with the specified ID
        /// </remarks>
        /// <param name='teamId'>
        /// </param>
        /// <param name='select'>
        /// To map to a TeamResponse object, this should be set to
        /// id,displayName,createdDateTime,deletedDateTime
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<TeamResponse>> GetTeamWithHttpMessagesAsync(string teamId, string select = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (teamId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "teamId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("select", select);
                tracingParameters.Add("teamId", teamId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTeam", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "groups/{teamId}").ToString();
            _url = _url.Replace("{teamId}", System.Uri.EscapeDataString(teamId));
            List<string> _queryParameters = new List<string>();
            if (select != null)
            {
                _queryParameters.Add(string.Format("$select={0}", System.Uri.EscapeDataString(select)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<TeamResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<TeamResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// </summary>
    public partial interface IMicrosoftGraphClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


        /// <summary>
        /// Get Schedule
        /// </summary>
        /// <remarks>
        /// Retrieve the properties and relationships of a schedule object.
        /// </remarks>
        /// <param name='teamId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ScheduleResponse>> GetScheduleWithHttpMessagesAsync(string teamId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create or Replace Schedule
        /// </summary>
        /// <remarks>
        /// Create or replace a schedule object.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='teamId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ScheduleResponse>> CreateReplaceScheduleWithHttpMessagesAsync(ScheduleRequest body, string teamId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Scheduling Groups
        /// </summary>
        /// <remarks>
        /// Get the list of schedulingGroups in this schedule.
        /// </remarks>
        /// <param name='teamId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SchedulingGroupCollectionResponse>> ListSchedulingGroupsWithHttpMessagesAsync(string teamId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Scheduling Group
        /// </summary>
        /// <remarks>
        /// Create a new schedulingGroup.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='teamId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateSchedulingGroupWithHttpMessagesAsync(SchedulingGroupRequest body, string teamId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Scheduling Group
        /// </summary>
        /// <remarks>
        /// Retrieves the properties and relationships of a schedulingGroup by
        /// ID.
        /// </remarks>
        /// <param name='teamId'>
        /// </param>
        /// <param name='schedulingGroupId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SchedulingGroupResponse>> GetSchedulingGroupWithHttpMessagesAsync(string teamId, string schedulingGroupId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Replace Scheduling Group
        /// </summary>
        /// <remarks>
        /// Replace an existing schedulingGroup.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='ifMatch'>
        /// The etag for concurrency control
        /// </param>
        /// <param name='teamId'>
        /// </param>
        /// <param name='schedulingGroupId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ReplaceSchedulingGroupWithHttpMessagesAsync(SchedulingGroupResponse body, string ifMatch, string teamId, string schedulingGroupId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Scheduling Group
        /// </summary>
        /// <remarks>
        /// Mark a schedulingGroup as inactive by setting its isActive
        /// property. This method does not remove the schedulingGroup from the
        /// schedule. Existing shift instances assigned to the scheduling group
        /// remain part of the group.
        /// </remarks>
        /// <param name='teamId'>
        /// </param>
        /// <param name='schedulingGroupId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteSchedulingGroupWithHttpMessagesAsync(string teamId, string schedulingGroupId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Shifts
        /// </summary>
        /// <remarks>
        /// Get the list of shift instances in a schedule.
        /// </remarks>
        /// <param name='filter'>
        /// ODATA filter parameter to limit the shifts returned.
        /// </param>
        /// <param name='teamId'>
        /// </param>
        /// <param name='top'>
        /// The number of shifts to fetch (if not specified this defaults to
        /// 100)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ShiftCollectionResponse>> ListShiftsWithHttpMessagesAsync(string filter, string teamId, int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Shift
        /// </summary>
        /// <remarks>
        /// Create a new shift instance in a schedule.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='teamId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateShiftWithHttpMessagesAsync(ShiftRequest body, string teamId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Shift
        /// </summary>
        /// <remarks>
        /// etrieve the properties and relationships of a shift object by ID.
        /// </remarks>
        /// <param name='teamId'>
        /// </param>
        /// <param name='shiftId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ShiftResponse>> GetShiftWithHttpMessagesAsync(string teamId, string shiftId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Replace Shift
        /// </summary>
        /// <remarks>
        /// Replace an existing shift.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='teamId'>
        /// </param>
        /// <param name='shiftId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ReplaceShiftWithHttpMessagesAsync(ShiftResponse body, string teamId, string shiftId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Shift
        /// </summary>
        /// <remarks>
        /// Deletes a shift from the schedule.
        /// </remarks>
        /// <param name='teamId'>
        /// </param>
        /// <param name='shiftId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteShiftWithHttpMessagesAsync(string teamId, string shiftId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get User
        /// </summary>
        /// <remarks>
        /// Retrieve the properties and relationships of user object.
        /// </remarks>
        /// <param name='upn'>
        /// The user principle name e.g. user@appsource.onmicrosoft.com
        /// </param>
        /// <param name='select'>
        /// To map the Get result to an IdentityResponse, this should be set to
        /// id,displayName
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IdentityResponse>> GetUserByUpnWithHttpMessagesAsync(string upn, string select = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Share Schedule
        /// </summary>
        /// <remarks>
        /// Shares a schedule time range with schedule members. Make the
        /// collections of shift and timeOff items in the specified time range
        /// of the schedule viewable by the specified team members, including
        /// employees and managers. Each shift and timeOff instance in a
        /// schedule supports a draft version and a shared version of the item.
        /// The draft version is viewable by only managers, and the shared
        /// version is viewable by employees and managers. For each shift and
        /// timeOff instance in the specified time range, the share action
        /// updates the shared version from the draft version, so that in
        /// addition to managers, employees can also view the most current
        /// information about the item. The notifyTeam parameter further
        /// specifies which employees can view the item.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='teamId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ShareScheduleWithHttpMessagesAsync(ShareRequest body, string teamId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Members
        /// </summary>
        /// <remarks>
        /// Get a list of the group's direct members. A group can have users,
        /// contacts, devices, service principals, and other groups as members.
        /// This operation is not transitive.
        /// </remarks>
        /// <param name='teamId'>
        /// </param>
        /// <param name='select'>
        /// To map the Get result to an IdentityResponse, this should be set to
        /// id,displayName
        /// </param>
        /// <param name='top'>
        /// The number of users to return (max supported 999)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MembersResponse>> GetMembersWithHttpMessagesAsync(string teamId, string select = default(string), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Team
        /// </summary>
        /// <remarks>
        /// Gets the team with the specified ID
        /// </remarks>
        /// <param name='teamId'>
        /// </param>
        /// <param name='select'>
        /// To map to a TeamResponse object, this should be set to
        /// id,displayName,createdDateTime,deletedDateTime
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TeamResponse>> GetTeamWithHttpMessagesAsync(string teamId, string select = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MicrosoftGraphClient.
    /// </summary>
    public static partial class MicrosoftGraphClientExtensions
    {
            /// <summary>
            /// Get Schedule
            /// </summary>
            /// <remarks>
            /// Retrieve the properties and relationships of a schedule object.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamId'>
            /// </param>
            public static ScheduleResponse GetSchedule(this IMicrosoftGraphClient operations, string teamId)
            {
                return operations.GetScheduleAsync(teamId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Schedule
            /// </summary>
            /// <remarks>
            /// Retrieve the properties and relationships of a schedule object.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ScheduleResponse> GetScheduleAsync(this IMicrosoftGraphClient operations, string teamId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetScheduleWithHttpMessagesAsync(teamId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or Replace Schedule
            /// </summary>
            /// <remarks>
            /// Create or replace a schedule object.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='teamId'>
            /// </param>
            public static ScheduleResponse CreateReplaceSchedule(this IMicrosoftGraphClient operations, ScheduleRequest body, string teamId)
            {
                return operations.CreateReplaceScheduleAsync(body, teamId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or Replace Schedule
            /// </summary>
            /// <remarks>
            /// Create or replace a schedule object.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='teamId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ScheduleResponse> CreateReplaceScheduleAsync(this IMicrosoftGraphClient operations, ScheduleRequest body, string teamId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateReplaceScheduleWithHttpMessagesAsync(body, teamId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Scheduling Groups
            /// </summary>
            /// <remarks>
            /// Get the list of schedulingGroups in this schedule.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamId'>
            /// </param>
            public static SchedulingGroupCollectionResponse ListSchedulingGroups(this IMicrosoftGraphClient operations, string teamId)
            {
                return operations.ListSchedulingGroupsAsync(teamId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Scheduling Groups
            /// </summary>
            /// <remarks>
            /// Get the list of schedulingGroups in this schedule.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SchedulingGroupCollectionResponse> ListSchedulingGroupsAsync(this IMicrosoftGraphClient operations, string teamId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSchedulingGroupsWithHttpMessagesAsync(teamId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Scheduling Group
            /// </summary>
            /// <remarks>
            /// Create a new schedulingGroup.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='teamId'>
            /// </param>
            public static object CreateSchedulingGroup(this IMicrosoftGraphClient operations, SchedulingGroupRequest body, string teamId)
            {
                return operations.CreateSchedulingGroupAsync(body, teamId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Scheduling Group
            /// </summary>
            /// <remarks>
            /// Create a new schedulingGroup.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='teamId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateSchedulingGroupAsync(this IMicrosoftGraphClient operations, SchedulingGroupRequest body, string teamId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSchedulingGroupWithHttpMessagesAsync(body, teamId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Scheduling Group
            /// </summary>
            /// <remarks>
            /// Retrieves the properties and relationships of a schedulingGroup by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamId'>
            /// </param>
            /// <param name='schedulingGroupId'>
            /// </param>
            public static SchedulingGroupResponse GetSchedulingGroup(this IMicrosoftGraphClient operations, string teamId, string schedulingGroupId)
            {
                return operations.GetSchedulingGroupAsync(teamId, schedulingGroupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Scheduling Group
            /// </summary>
            /// <remarks>
            /// Retrieves the properties and relationships of a schedulingGroup by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamId'>
            /// </param>
            /// <param name='schedulingGroupId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SchedulingGroupResponse> GetSchedulingGroupAsync(this IMicrosoftGraphClient operations, string teamId, string schedulingGroupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSchedulingGroupWithHttpMessagesAsync(teamId, schedulingGroupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replace Scheduling Group
            /// </summary>
            /// <remarks>
            /// Replace an existing schedulingGroup.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='ifMatch'>
            /// The etag for concurrency control
            /// </param>
            /// <param name='teamId'>
            /// </param>
            /// <param name='schedulingGroupId'>
            /// </param>
            public static object ReplaceSchedulingGroup(this IMicrosoftGraphClient operations, SchedulingGroupResponse body, string ifMatch, string teamId, string schedulingGroupId)
            {
                return operations.ReplaceSchedulingGroupAsync(body, ifMatch, teamId, schedulingGroupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replace Scheduling Group
            /// </summary>
            /// <remarks>
            /// Replace an existing schedulingGroup.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='ifMatch'>
            /// The etag for concurrency control
            /// </param>
            /// <param name='teamId'>
            /// </param>
            /// <param name='schedulingGroupId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ReplaceSchedulingGroupAsync(this IMicrosoftGraphClient operations, SchedulingGroupResponse body, string ifMatch, string teamId, string schedulingGroupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceSchedulingGroupWithHttpMessagesAsync(body, ifMatch, teamId, schedulingGroupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Scheduling Group
            /// </summary>
            /// <remarks>
            /// Mark a schedulingGroup as inactive by setting its isActive property. This
            /// method does not remove the schedulingGroup from the schedule. Existing
            /// shift instances assigned to the scheduling group remain part of the group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamId'>
            /// </param>
            /// <param name='schedulingGroupId'>
            /// </param>
            public static void DeleteSchedulingGroup(this IMicrosoftGraphClient operations, string teamId, string schedulingGroupId)
            {
                operations.DeleteSchedulingGroupAsync(teamId, schedulingGroupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Scheduling Group
            /// </summary>
            /// <remarks>
            /// Mark a schedulingGroup as inactive by setting its isActive property. This
            /// method does not remove the schedulingGroup from the schedule. Existing
            /// shift instances assigned to the scheduling group remain part of the group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamId'>
            /// </param>
            /// <param name='schedulingGroupId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSchedulingGroupAsync(this IMicrosoftGraphClient operations, string teamId, string schedulingGroupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSchedulingGroupWithHttpMessagesAsync(teamId, schedulingGroupId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List Shifts
            /// </summary>
            /// <remarks>
            /// Get the list of shift instances in a schedule.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// ODATA filter parameter to limit the shifts returned.
            /// </param>
            /// <param name='teamId'>
            /// </param>
            /// <param name='top'>
            /// The number of shifts to fetch (if not specified this defaults to 100)
            /// </param>
            public static ShiftCollectionResponse ListShifts(this IMicrosoftGraphClient operations, string filter, string teamId, int? top = default(int?))
            {
                return operations.ListShiftsAsync(filter, teamId, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Shifts
            /// </summary>
            /// <remarks>
            /// Get the list of shift instances in a schedule.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// ODATA filter parameter to limit the shifts returned.
            /// </param>
            /// <param name='teamId'>
            /// </param>
            /// <param name='top'>
            /// The number of shifts to fetch (if not specified this defaults to 100)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ShiftCollectionResponse> ListShiftsAsync(this IMicrosoftGraphClient operations, string filter, string teamId, int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListShiftsWithHttpMessagesAsync(filter, teamId, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Shift
            /// </summary>
            /// <remarks>
            /// Create a new shift instance in a schedule.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='teamId'>
            /// </param>
            public static object CreateShift(this IMicrosoftGraphClient operations, ShiftRequest body, string teamId)
            {
                return operations.CreateShiftAsync(body, teamId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Shift
            /// </summary>
            /// <remarks>
            /// Create a new shift instance in a schedule.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='teamId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateShiftAsync(this IMicrosoftGraphClient operations, ShiftRequest body, string teamId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateShiftWithHttpMessagesAsync(body, teamId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Shift
            /// </summary>
            /// <remarks>
            /// etrieve the properties and relationships of a shift object by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamId'>
            /// </param>
            /// <param name='shiftId'>
            /// </param>
            public static ShiftResponse GetShift(this IMicrosoftGraphClient operations, string teamId, string shiftId)
            {
                return operations.GetShiftAsync(teamId, shiftId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Shift
            /// </summary>
            /// <remarks>
            /// etrieve the properties and relationships of a shift object by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamId'>
            /// </param>
            /// <param name='shiftId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ShiftResponse> GetShiftAsync(this IMicrosoftGraphClient operations, string teamId, string shiftId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetShiftWithHttpMessagesAsync(teamId, shiftId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replace Shift
            /// </summary>
            /// <remarks>
            /// Replace an existing shift.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='teamId'>
            /// </param>
            /// <param name='shiftId'>
            /// </param>
            public static object ReplaceShift(this IMicrosoftGraphClient operations, ShiftResponse body, string teamId, string shiftId)
            {
                return operations.ReplaceShiftAsync(body, teamId, shiftId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replace Shift
            /// </summary>
            /// <remarks>
            /// Replace an existing shift.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='teamId'>
            /// </param>
            /// <param name='shiftId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ReplaceShiftAsync(this IMicrosoftGraphClient operations, ShiftResponse body, string teamId, string shiftId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceShiftWithHttpMessagesAsync(body, teamId, shiftId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Shift
            /// </summary>
            /// <remarks>
            /// Deletes a shift from the schedule.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamId'>
            /// </param>
            /// <param name='shiftId'>
            /// </param>
            public static void DeleteShift(this IMicrosoftGraphClient operations, string teamId, string shiftId)
            {
                operations.DeleteShiftAsync(teamId, shiftId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Shift
            /// </summary>
            /// <remarks>
            /// Deletes a shift from the schedule.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamId'>
            /// </param>
            /// <param name='shiftId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteShiftAsync(this IMicrosoftGraphClient operations, string teamId, string shiftId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteShiftWithHttpMessagesAsync(teamId, shiftId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get User
            /// </summary>
            /// <remarks>
            /// Retrieve the properties and relationships of user object.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='upn'>
            /// The user principle name e.g. user@appsource.onmicrosoft.com
            /// </param>
            /// <param name='select'>
            /// To map the Get result to an IdentityResponse, this should be set to
            /// id,displayName
            /// </param>
            public static IdentityResponse GetUserByUpn(this IMicrosoftGraphClient operations, string upn, string select = default(string))
            {
                return operations.GetUserByUpnAsync(upn, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get User
            /// </summary>
            /// <remarks>
            /// Retrieve the properties and relationships of user object.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='upn'>
            /// The user principle name e.g. user@appsource.onmicrosoft.com
            /// </param>
            /// <param name='select'>
            /// To map the Get result to an IdentityResponse, this should be set to
            /// id,displayName
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentityResponse> GetUserByUpnAsync(this IMicrosoftGraphClient operations, string upn, string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserByUpnWithHttpMessagesAsync(upn, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Share Schedule
            /// </summary>
            /// <remarks>
            /// Shares a schedule time range with schedule members. Make the collections of
            /// shift and timeOff items in the specified time range of the schedule
            /// viewable by the specified team members, including employees and managers.
            /// Each shift and timeOff instance in a schedule supports a draft version and
            /// a shared version of the item. The draft version is viewable by only
            /// managers, and the shared version is viewable by employees and managers. For
            /// each shift and timeOff instance in the specified time range, the share
            /// action updates the shared version from the draft version, so that in
            /// addition to managers, employees can also view the most current information
            /// about the item. The notifyTeam parameter further specifies which employees
            /// can view the item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='teamId'>
            /// </param>
            public static void ShareSchedule(this IMicrosoftGraphClient operations, ShareRequest body, string teamId)
            {
                operations.ShareScheduleAsync(body, teamId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Share Schedule
            /// </summary>
            /// <remarks>
            /// Shares a schedule time range with schedule members. Make the collections of
            /// shift and timeOff items in the specified time range of the schedule
            /// viewable by the specified team members, including employees and managers.
            /// Each shift and timeOff instance in a schedule supports a draft version and
            /// a shared version of the item. The draft version is viewable by only
            /// managers, and the shared version is viewable by employees and managers. For
            /// each shift and timeOff instance in the specified time range, the share
            /// action updates the shared version from the draft version, so that in
            /// addition to managers, employees can also view the most current information
            /// about the item. The notifyTeam parameter further specifies which employees
            /// can view the item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='teamId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ShareScheduleAsync(this IMicrosoftGraphClient operations, ShareRequest body, string teamId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ShareScheduleWithHttpMessagesAsync(body, teamId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get Members
            /// </summary>
            /// <remarks>
            /// Get a list of the group's direct members. A group can have users, contacts,
            /// devices, service principals, and other groups as members. This operation is
            /// not transitive.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamId'>
            /// </param>
            /// <param name='select'>
            /// To map the Get result to an IdentityResponse, this should be set to
            /// id,displayName
            /// </param>
            /// <param name='top'>
            /// The number of users to return (max supported 999)
            /// </param>
            public static MembersResponse GetMembers(this IMicrosoftGraphClient operations, string teamId, string select = default(string), int? top = default(int?))
            {
                return operations.GetMembersAsync(teamId, select, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Members
            /// </summary>
            /// <remarks>
            /// Get a list of the group's direct members. A group can have users, contacts,
            /// devices, service principals, and other groups as members. This operation is
            /// not transitive.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamId'>
            /// </param>
            /// <param name='select'>
            /// To map the Get result to an IdentityResponse, this should be set to
            /// id,displayName
            /// </param>
            /// <param name='top'>
            /// The number of users to return (max supported 999)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MembersResponse> GetMembersAsync(this IMicrosoftGraphClient operations, string teamId, string select = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMembersWithHttpMessagesAsync(teamId, select, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Team
            /// </summary>
            /// <remarks>
            /// Gets the team with the specified ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamId'>
            /// </param>
            /// <param name='select'>
            /// To map to a TeamResponse object, this should be set to
            /// id,displayName,createdDateTime,deletedDateTime
            /// </param>
            public static TeamResponse GetTeam(this IMicrosoftGraphClient operations, string teamId, string select = default(string))
            {
                return operations.GetTeamAsync(teamId, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Team
            /// </summary>
            /// <remarks>
            /// Gets the team with the specified ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamId'>
            /// </param>
            /// <param name='select'>
            /// To map to a TeamResponse object, this should be set to
            /// id,displayName,createdDateTime,deletedDateTime
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TeamResponse> GetTeamAsync(this IMicrosoftGraphClient operations, string teamId, string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTeamWithHttpMessagesAsync(teamId, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for Schedule
    /// </summary>
    /// <remarks>
    /// A collection of schedulingGroup objects, shift objects, timeOffReason
    /// objects, and timeOff objects within a team.
    /// </remarks>
    public partial class ScheduleResponse
    {
        /// <summary>
        /// Initializes a new instance of the ScheduleResponse class.
        /// </summary>
        public ScheduleResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScheduleResponse class.
        /// </summary>
        public ScheduleResponse(string id = default(string), bool enabled = default(bool), string timeZone = default(string), string provisionStatus = default(string), string provisionStatusCode = default(string))
        {
            Id = id;
            Enabled = enabled;
            TimeZone = timeZone;
            ProvisionStatus = provisionStatus;
            ProvisionStatusCode = provisionStatusCode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "enabled")]
        public bool Enabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timeZone")]
        public string TimeZone { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "provisionStatus")]
        public string ProvisionStatus { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "provisionStatusCode")]
        public string ProvisionStatusCode { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for IdentityResponse
    /// </summary>
    /// <remarks>
    /// The root of the IdentityResponse type's schema.
    /// </remarks>
    public partial class IdentityResponse
    {
        /// <summary>
        /// Initializes a new instance of the IdentityResponse class.
        /// </summary>
        public IdentityResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IdentityResponse class.
        /// </summary>
        public IdentityResponse(string displayName = default(string), string id = default(string), string userPrincipalName = default(string))
        {
            DisplayName = displayName;
            Id = id;
            UserPrincipalName = userPrincipalName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userPrincipalName")]
        public string UserPrincipalName { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for IdentitySetResponse
    /// </summary>
    /// <remarks>
    /// The root of the IdentitySetResponse type's schema.
    /// </remarks>
    public partial class IdentitySetResponse
    {
        /// <summary>
        /// Initializes a new instance of the IdentitySetResponse class.
        /// </summary>
        public IdentitySetResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IdentitySetResponse class.
        /// </summary>
        public IdentitySetResponse(IdentityResponse application = default(IdentityResponse), IdentityResponse applicationInstance = default(IdentityResponse), IdentityResponse device = default(IdentityResponse), IdentityResponse encrypted = default(IdentityResponse), IdentityResponse guest = default(IdentityResponse), IdentityResponse phone = default(IdentityResponse), IdentityResponse user = default(IdentityResponse))
        {
            Application = application;
            ApplicationInstance = applicationInstance;
            Device = device;
            Encrypted = encrypted;
            Guest = guest;
            Phone = phone;
            User = user;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "application")]
        public IdentityResponse Application { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "applicationInstance")]
        public IdentityResponse ApplicationInstance { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "device")]
        public IdentityResponse Device { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "encrypted")]
        public IdentityResponse Encrypted { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "guest")]
        public IdentityResponse Guest { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "phone")]
        public IdentityResponse Phone { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "user")]
        public IdentityResponse User { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for SchedulingGroup
    /// </summary>
    /// <remarks>
    /// A logical grouping of users in a schedule (usually by role).
    /// </remarks>
    public partial class SchedulingGroupResponse
    {
        /// <summary>
        /// Initializes a new instance of the SchedulingGroupResponse class.
        /// </summary>
        public SchedulingGroupResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SchedulingGroupResponse class.
        /// </summary>
        public SchedulingGroupResponse(string id = default(string), System.DateTime? createdDateTime = default(System.DateTime?), System.DateTime? lastModifiedDateTime = default(System.DateTime?), string displayName = default(string), bool isActive = default(bool), IList<string> userIds = default(IList<string>), IdentitySetResponse lastModifiedBy = default(IdentitySetResponse))
        {
            Id = id;
            CreatedDateTime = createdDateTime;
            LastModifiedDateTime = lastModifiedDateTime;
            DisplayName = displayName;
            IsActive = isActive;
            UserIds = userIds;
            LastModifiedBy = lastModifiedBy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdDateTime")]
        public System.DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastModifiedDateTime")]
        public System.DateTime? LastModifiedDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isActive")]
        public bool IsActive { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userIds")]
        public IList<string> UserIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastModifiedBy")]
        public IdentitySetResponse LastModifiedBy { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for SchedulingGroupCollection
    /// </summary>
    /// <remarks>
    /// Collection of scheduling groups
    /// </remarks>
    public partial class SchedulingGroupCollectionResponse
    {
        /// <summary>
        /// Initializes a new instance of the SchedulingGroupCollectionResponse
        /// class.
        /// </summary>
        public SchedulingGroupCollectionResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SchedulingGroupCollectionResponse
        /// class.
        /// </summary>
        public SchedulingGroupCollectionResponse(IList<SchedulingGroupResponse> value = default(IList<SchedulingGroupResponse>))
        {
            Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public IList<SchedulingGroupResponse> Value { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for SchedulingGroupRequest
    /// </summary>
    /// <remarks>
    /// The data required for creating/updating scheduling groups
    /// </remarks>
    public partial class SchedulingGroupRequest
    {
        /// <summary>
        /// Initializes a new instance of the SchedulingGroupRequest class.
        /// </summary>
        public SchedulingGroupRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SchedulingGroupRequest class.
        /// </summary>
        public SchedulingGroupRequest(string displayName = default(string), bool? isActive = default(bool?), IList<string> userIds = default(IList<string>))
        {
            DisplayName = displayName;
            IsActive = isActive;
            UserIds = userIds;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userIds")]
        public IList<string> UserIds { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for ShiftActivityResponse
    /// </summary>
    /// <remarks>
    /// The root of the ShiftActivityResponse type's schema.
    /// </remarks>
    public partial class ShiftActivity
    {
        /// <summary>
        /// Initializes a new instance of the ShiftActivity class.
        /// </summary>
        public ShiftActivity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ShiftActivity class.
        /// </summary>
        public ShiftActivity(bool isPaid = default(bool), System.DateTime? startDateTime = default(System.DateTime?), System.DateTime? endDateTime = default(System.DateTime?), string code = default(string), string displayName = default(string), string theme = default(string))
        {
            IsPaid = isPaid;
            StartDateTime = startDateTime;
            EndDateTime = endDateTime;
            Code = code;
            DisplayName = displayName;
            Theme = theme;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isPaid")]
        public bool IsPaid { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startDateTime")]
        public System.DateTime? StartDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "endDateTime")]
        public System.DateTime? EndDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "code")]
        public string Code { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "theme")]
        public string Theme { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for ShiftItemResponse
    /// </summary>
    /// <remarks>
    /// The root of the ShiftItemResponse type's schema.
    /// </remarks>
    public partial class ShiftItem
    {
        /// <summary>
        /// Initializes a new instance of the ShiftItem class.
        /// </summary>
        public ShiftItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ShiftItem class.
        /// </summary>
        public ShiftItem(string displayName = default(string), string notes = default(string), System.DateTime? startDateTime = default(System.DateTime?), System.DateTime? endDateTime = default(System.DateTime?), string theme = default(string), IList<ShiftActivity> activities = default(IList<ShiftActivity>))
        {
            DisplayName = displayName;
            Notes = notes;
            StartDateTime = startDateTime;
            EndDateTime = endDateTime;
            Theme = theme;
            Activities = activities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "notes")]
        public string Notes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startDateTime")]
        public System.DateTime? StartDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "endDateTime")]
        public System.DateTime? EndDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "theme")]
        public string Theme { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "activities")]
        public IList<ShiftActivity> Activities { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for ShiftResponse
    /// </summary>
    /// <remarks>
    /// The root of the ShiftResponse type's schema.
    /// </remarks>
    public partial class ShiftResponse
    {
        /// <summary>
        /// Initializes a new instance of the ShiftResponse class.
        /// </summary>
        public ShiftResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ShiftResponse class.
        /// </summary>
        public ShiftResponse(string id = default(string), System.DateTime? createdDateTime = default(System.DateTime?), System.DateTime? lastModifiedDateTime = default(System.DateTime?), string userId = default(string), string schedulingGroupId = default(string), IdentitySetResponse lastModifiedBy = default(IdentitySetResponse), ShiftItem sharedShift = default(ShiftItem), ShiftItem draftShift = default(ShiftItem))
        {
            Id = id;
            CreatedDateTime = createdDateTime;
            LastModifiedDateTime = lastModifiedDateTime;
            UserId = userId;
            SchedulingGroupId = schedulingGroupId;
            LastModifiedBy = lastModifiedBy;
            SharedShift = sharedShift;
            DraftShift = draftShift;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdDateTime")]
        public System.DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastModifiedDateTime")]
        public System.DateTime? LastModifiedDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userId")]
        public string UserId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "schedulingGroupId")]
        public string SchedulingGroupId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastModifiedBy")]
        public IdentitySetResponse LastModifiedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sharedShift")]
        public ShiftItem SharedShift { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "draftShift")]
        public ShiftItem DraftShift { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for ShiftCollectionResponse
    /// </summary>
    /// <remarks>
    /// The root of the ShiftCollectionResponse type's schema.
    /// </remarks>
    public partial class ShiftCollectionResponse
    {
        /// <summary>
        /// Initializes a new instance of the ShiftCollectionResponse class.
        /// </summary>
        public ShiftCollectionResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ShiftCollectionResponse class.
        /// </summary>
        public ShiftCollectionResponse(IList<ShiftResponse> value = default(IList<ShiftResponse>))
        {
            Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public IList<ShiftResponse> Value { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for ShiftRequest
    /// </summary>
    /// <remarks>
    /// The root of the ShiftRequest type's schema.
    /// </remarks>
    public partial class ShiftRequest
    {
        /// <summary>
        /// Initializes a new instance of the ShiftRequest class.
        /// </summary>
        public ShiftRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ShiftRequest class.
        /// </summary>
        public ShiftRequest(string userId = default(string), string schedulingGroupId = default(string), ShiftItem sharedShift = default(ShiftItem), ShiftItem draftShift = default(ShiftItem))
        {
            UserId = userId;
            SchedulingGroupId = schedulingGroupId;
            SharedShift = sharedShift;
            DraftShift = draftShift;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userId")]
        public string UserId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "schedulingGroupId")]
        public string SchedulingGroupId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sharedShift")]
        public ShiftItem SharedShift { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "draftShift")]
        public ShiftItem DraftShift { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class UserResponseMailboxSettings
    {
        /// <summary>
        /// Initializes a new instance of the UserResponseMailboxSettings
        /// class.
        /// </summary>
        public UserResponseMailboxSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserResponseMailboxSettings
        /// class.
        /// </summary>
        public UserResponseMailboxSettings(string odatatype = default(string))
        {
            Odatatype = odatatype;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "@odata.type")]
        public string Odatatype { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class UserResponseOnPremisesExtensionAttributes
    {
        /// <summary>
        /// Initializes a new instance of the
        /// UserResponseOnPremisesExtensionAttributes class.
        /// </summary>
        public UserResponseOnPremisesExtensionAttributes()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// UserResponseOnPremisesExtensionAttributes class.
        /// </summary>
        public UserResponseOnPremisesExtensionAttributes(string odatatype = default(string))
        {
            Odatatype = odatatype;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "@odata.type")]
        public string Odatatype { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class UserResponsePasswordProfile
    {
        /// <summary>
        /// Initializes a new instance of the UserResponsePasswordProfile
        /// class.
        /// </summary>
        public UserResponsePasswordProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserResponsePasswordProfile
        /// class.
        /// </summary>
        public UserResponsePasswordProfile(string odatatype = default(string))
        {
            Odatatype = odatatype;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "@odata.type")]
        public string Odatatype { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class UserResponseCalendar
    {
        /// <summary>
        /// Initializes a new instance of the UserResponseCalendar class.
        /// </summary>
        public UserResponseCalendar()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserResponseCalendar class.
        /// </summary>
        public UserResponseCalendar(string odatatype = default(string))
        {
            Odatatype = odatatype;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "@odata.type")]
        public string Odatatype { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class UserResponseDrive
    {
        /// <summary>
        /// Initializes a new instance of the UserResponseDrive class.
        /// </summary>
        public UserResponseDrive()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserResponseDrive class.
        /// </summary>
        public UserResponseDrive(string odatatype = default(string))
        {
            Odatatype = odatatype;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "@odata.type")]
        public string Odatatype { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class UserResponseInsights
    {
        /// <summary>
        /// Initializes a new instance of the UserResponseInsights class.
        /// </summary>
        public UserResponseInsights()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserResponseInsights class.
        /// </summary>
        public UserResponseInsights(string odatatype = default(string))
        {
            Odatatype = odatatype;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "@odata.type")]
        public string Odatatype { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class UserResponseSettings
    {
        /// <summary>
        /// Initializes a new instance of the UserResponseSettings class.
        /// </summary>
        public UserResponseSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserResponseSettings class.
        /// </summary>
        public UserResponseSettings(string odatatype = default(string))
        {
            Odatatype = odatatype;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "@odata.type")]
        public string Odatatype { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class UserResponseInferenceClassification
    {
        /// <summary>
        /// Initializes a new instance of the
        /// UserResponseInferenceClassification class.
        /// </summary>
        public UserResponseInferenceClassification()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// UserResponseInferenceClassification class.
        /// </summary>
        public UserResponseInferenceClassification(string odatatype = default(string))
        {
            Odatatype = odatatype;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "@odata.type")]
        public string Odatatype { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class UserResponseManager
    {
        /// <summary>
        /// Initializes a new instance of the UserResponseManager class.
        /// </summary>
        public UserResponseManager()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserResponseManager class.
        /// </summary>
        public UserResponseManager(string odatatype = default(string))
        {
            Odatatype = odatatype;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "@odata.type")]
        public string Odatatype { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class UserResponseOutlook
    {
        /// <summary>
        /// Initializes a new instance of the UserResponseOutlook class.
        /// </summary>
        public UserResponseOutlook()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserResponseOutlook class.
        /// </summary>
        public UserResponseOutlook(string odatatype = default(string))
        {
            Odatatype = odatatype;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "@odata.type")]
        public string Odatatype { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class UserResponsePhoto
    {
        /// <summary>
        /// Initializes a new instance of the UserResponsePhoto class.
        /// </summary>
        public UserResponsePhoto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserResponsePhoto class.
        /// </summary>
        public UserResponsePhoto(string odatatype = default(string))
        {
            Odatatype = odatatype;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "@odata.type")]
        public string Odatatype { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for UserResponse
    /// </summary>
    /// <remarks>
    /// The root of the UserResponse type's schema.
    /// </remarks>
    public partial class UserResponse
    {
        /// <summary>
        /// Initializes a new instance of the UserResponse class.
        /// </summary>
        public UserResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserResponse class.
        /// </summary>
        public UserResponse(bool? accountEnabled = default(bool?), string ageGroup = default(string), IList<object> assignedLicenses = default(IList<object>), IList<object> assignedPlans = default(IList<object>), string birthday = default(string), IList<object> businessPhones = default(IList<object>), string city = default(string), string companyName = default(string), string consentProvidedForMinor = default(string), string country = default(string), string deletedDateTime = default(string), string department = default(string), string displayName = default(string), string externalUserState = default(string), System.DateTime? externalUserStateChangeDateTime = default(System.DateTime?), string givenName = default(string), string hireDate = default(string), string id = default(string), IList<object> interests = default(IList<object>), bool? isResourceAccount = default(bool?), string jobTitle = default(string), string legalAgeGroupClassification = default(string), IList<object> licenseAssignmentStates = default(IList<object>), string mail = default(string), UserResponseMailboxSettings mailboxSettings = default(UserResponseMailboxSettings), string mailNickname = default(string), string mobilePhone = default(string), string mySite = default(string), string officeLocation = default(string), UserResponseOnPremisesExtensionAttributes onPremisesExtensionAttributes = default(UserResponseOnPremisesExtensionAttributes), string onPremisesImmutableId = default(string), string onPremisesLastSyncDateTime = default(string), IList<object> onPremisesProvisioningErrors = default(IList<object>), string onPremisesSecurityIdentifier = default(string), bool? onPremisesSyncEnabled = default(bool?), string passwordPolicies = default(string), UserResponsePasswordProfile passwordProfile = default(UserResponsePasswordProfile), IList<object> pastProjects = default(IList<object>), string postalCode = default(string), string preferredDataLocation = default(string), string preferredLanguage = default(string), string preferredName = default(string), IList<object> provisionedPlans = default(IList<object>), IList<object> proxyAddresses = default(IList<object>), IList<object> responsibilities = default(IList<object>), IList<object> schools = default(IList<object>), IList<object> skills = default(IList<object>), string state = default(string), string streetAddress = default(string), string surname = default(string), string usageLocation = default(string), string userPrincipalName = default(string), string userType = default(string), UserResponseCalendar calendar = default(UserResponseCalendar), IList<object> calendarGroups = default(IList<object>), IList<object> calendarView = default(IList<object>), IList<object> calendars = default(IList<object>), IList<object> contacts = default(IList<object>), IList<object> contactFolders = default(IList<object>), IList<object> createdObjects = default(IList<object>), IList<object> directReports = default(IList<object>), UserResponseDrive drive = default(UserResponseDrive), UserResponseInsights insights = default(UserResponseInsights), UserResponseSettings settings = default(UserResponseSettings), IList<object> events = default(IList<object>), IList<object> extensions = default(IList<object>), UserResponseInferenceClassification inferenceClassification = default(UserResponseInferenceClassification), IList<object> mailFolders = default(IList<object>), UserResponseManager manager = default(UserResponseManager), IList<object> memberOf = default(IList<object>), IList<object> joinedTeams = default(IList<object>), IList<object> messages = default(IList<object>), UserResponseOutlook outlook = default(UserResponseOutlook), IList<object> ownedDevices = default(IList<object>), UserResponsePhoto photo = default(UserResponsePhoto), IList<object> registeredDevices = default(IList<object>))
        {
            AccountEnabled = accountEnabled;
            AgeGroup = ageGroup;
            AssignedLicenses = assignedLicenses;
            AssignedPlans = assignedPlans;
            Birthday = birthday;
            BusinessPhones = businessPhones;
            City = city;
            CompanyName = companyName;
            ConsentProvidedForMinor = consentProvidedForMinor;
            Country = country;
            DeletedDateTime = deletedDateTime;
            Department = department;
            DisplayName = displayName;
            ExternalUserState = externalUserState;
            ExternalUserStateChangeDateTime = externalUserStateChangeDateTime;
            GivenName = givenName;
            HireDate = hireDate;
            Id = id;
            Interests = interests;
            IsResourceAccount = isResourceAccount;
            JobTitle = jobTitle;
            LegalAgeGroupClassification = legalAgeGroupClassification;
            LicenseAssignmentStates = licenseAssignmentStates;
            Mail = mail;
            MailboxSettings = mailboxSettings;
            MailNickname = mailNickname;
            MobilePhone = mobilePhone;
            MySite = mySite;
            OfficeLocation = officeLocation;
            OnPremisesExtensionAttributes = onPremisesExtensionAttributes;
            OnPremisesImmutableId = onPremisesImmutableId;
            OnPremisesLastSyncDateTime = onPremisesLastSyncDateTime;
            OnPremisesProvisioningErrors = onPremisesProvisioningErrors;
            OnPremisesSecurityIdentifier = onPremisesSecurityIdentifier;
            OnPremisesSyncEnabled = onPremisesSyncEnabled;
            PasswordPolicies = passwordPolicies;
            PasswordProfile = passwordProfile;
            PastProjects = pastProjects;
            PostalCode = postalCode;
            PreferredDataLocation = preferredDataLocation;
            PreferredLanguage = preferredLanguage;
            PreferredName = preferredName;
            ProvisionedPlans = provisionedPlans;
            ProxyAddresses = proxyAddresses;
            Responsibilities = responsibilities;
            Schools = schools;
            Skills = skills;
            State = state;
            StreetAddress = streetAddress;
            Surname = surname;
            UsageLocation = usageLocation;
            UserPrincipalName = userPrincipalName;
            UserType = userType;
            Calendar = calendar;
            CalendarGroups = calendarGroups;
            CalendarView = calendarView;
            Calendars = calendars;
            Contacts = contacts;
            ContactFolders = contactFolders;
            CreatedObjects = createdObjects;
            DirectReports = directReports;
            Drive = drive;
            Insights = insights;
            Settings = settings;
            Events = events;
            Extensions = extensions;
            InferenceClassification = inferenceClassification;
            MailFolders = mailFolders;
            Manager = manager;
            MemberOf = memberOf;
            JoinedTeams = joinedTeams;
            Messages = messages;
            Outlook = outlook;
            OwnedDevices = ownedDevices;
            Photo = photo;
            RegisteredDevices = registeredDevices;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "accountEnabled")]
        public bool? AccountEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ageGroup")]
        public string AgeGroup { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "assignedLicenses")]
        public IList<object> AssignedLicenses { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "assignedPlans")]
        public IList<object> AssignedPlans { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "birthday")]
        public string Birthday { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "businessPhones")]
        public IList<object> BusinessPhones { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "city")]
        public string City { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "companyName")]
        public string CompanyName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "consentProvidedForMinor")]
        public string ConsentProvidedForMinor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "country")]
        public string Country { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "deletedDateTime")]
        public string DeletedDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "department")]
        public string Department { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "externalUserState")]
        public string ExternalUserState { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "externalUserStateChangeDateTime")]
        public System.DateTime? ExternalUserStateChangeDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "givenName")]
        public string GivenName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hireDate")]
        public string HireDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "interests")]
        public IList<object> Interests { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isResourceAccount")]
        public bool? IsResourceAccount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "jobTitle")]
        public string JobTitle { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "legalAgeGroupClassification")]
        public string LegalAgeGroupClassification { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "licenseAssignmentStates")]
        public IList<object> LicenseAssignmentStates { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mail")]
        public string Mail { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mailboxSettings")]
        public UserResponseMailboxSettings MailboxSettings { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mailNickname")]
        public string MailNickname { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mobilePhone")]
        public string MobilePhone { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mySite")]
        public string MySite { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "officeLocation")]
        public string OfficeLocation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onPremisesExtensionAttributes")]
        public UserResponseOnPremisesExtensionAttributes OnPremisesExtensionAttributes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onPremisesImmutableId")]
        public string OnPremisesImmutableId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onPremisesLastSyncDateTime")]
        public string OnPremisesLastSyncDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onPremisesProvisioningErrors")]
        public IList<object> OnPremisesProvisioningErrors { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onPremisesSecurityIdentifier")]
        public string OnPremisesSecurityIdentifier { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onPremisesSyncEnabled")]
        public bool? OnPremisesSyncEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "passwordPolicies")]
        public string PasswordPolicies { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "passwordProfile")]
        public UserResponsePasswordProfile PasswordProfile { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pastProjects")]
        public IList<object> PastProjects { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "preferredDataLocation")]
        public string PreferredDataLocation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "preferredLanguage")]
        public string PreferredLanguage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "preferredName")]
        public string PreferredName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "provisionedPlans")]
        public IList<object> ProvisionedPlans { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "proxyAddresses")]
        public IList<object> ProxyAddresses { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "responsibilities")]
        public IList<object> Responsibilities { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "schools")]
        public IList<object> Schools { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "skills")]
        public IList<object> Skills { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "streetAddress")]
        public string StreetAddress { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "surname")]
        public string Surname { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "usageLocation")]
        public string UsageLocation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userPrincipalName")]
        public string UserPrincipalName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userType")]
        public string UserType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "calendar")]
        public UserResponseCalendar Calendar { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "calendarGroups")]
        public IList<object> CalendarGroups { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "calendarView")]
        public IList<object> CalendarView { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "calendars")]
        public IList<object> Calendars { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "contacts")]
        public IList<object> Contacts { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "contactFolders")]
        public IList<object> ContactFolders { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdObjects")]
        public IList<object> CreatedObjects { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "directReports")]
        public IList<object> DirectReports { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "drive")]
        public UserResponseDrive Drive { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "insights")]
        public UserResponseInsights Insights { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "settings")]
        public UserResponseSettings Settings { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "events")]
        public IList<object> Events { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "extensions")]
        public IList<object> Extensions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "inferenceClassification")]
        public UserResponseInferenceClassification InferenceClassification { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mailFolders")]
        public IList<object> MailFolders { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "manager")]
        public UserResponseManager Manager { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "memberOf")]
        public IList<object> MemberOf { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "joinedTeams")]
        public IList<object> JoinedTeams { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "messages")]
        public IList<object> Messages { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "outlook")]
        public UserResponseOutlook Outlook { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ownedDevices")]
        public IList<object> OwnedDevices { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "photo")]
        public UserResponsePhoto Photo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "registeredDevices")]
        public IList<object> RegisteredDevices { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for ScheduleRequest
    /// </summary>
    /// <remarks>
    /// The root of the ScheduleRequest type's schema.
    /// </remarks>
    public partial class ScheduleRequest
    {
        /// <summary>
        /// Initializes a new instance of the ScheduleRequest class.
        /// </summary>
        public ScheduleRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScheduleRequest class.
        /// </summary>
        public ScheduleRequest(bool enabled = default(bool), string timeZone = default(string))
        {
            Enabled = enabled;
            TimeZone = timeZone;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "enabled")]
        public bool Enabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timeZone")]
        public string TimeZone { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for ShareRequest
    /// </summary>
    /// <remarks>
    /// The root of the ShareRequest type's schema.
    /// </remarks>
    public partial class ShareRequest
    {
        /// <summary>
        /// Initializes a new instance of the ShareRequest class.
        /// </summary>
        public ShareRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ShareRequest class.
        /// </summary>
        public ShareRequest(bool? notifyTeam = default(bool?), System.DateTime? startDateTime = default(System.DateTime?), System.DateTime? endDateTime = default(System.DateTime?))
        {
            NotifyTeam = notifyTeam;
            StartDateTime = startDateTime;
            EndDateTime = endDateTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "notifyTeam")]
        public bool? NotifyTeam { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startDateTime")]
        public System.DateTime? StartDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "endDateTime")]
        public System.DateTime? EndDateTime { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for MembersResponse
    /// </summary>
    /// <remarks>
    /// The root of the MembersResponse type's schema.
    /// </remarks>
    public partial class MembersResponse
    {
        /// <summary>
        /// Initializes a new instance of the MembersResponse class.
        /// </summary>
        public MembersResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MembersResponse class.
        /// </summary>
        public MembersResponse(IList<IdentityResponse> value = default(IList<IdentityResponse>))
        {
            Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public IList<IdentityResponse> Value { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for TeamResponse
    /// </summary>
    /// <remarks>
    /// The details of a single team.
    /// </remarks>
    public partial class TeamResponse
    {
        /// <summary>
        /// Initializes a new instance of the TeamResponse class.
        /// </summary>
        public TeamResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TeamResponse class.
        /// </summary>
        public TeamResponse(string id = default(string), System.DateTime? deletedDateTime = default(System.DateTime?), System.DateTime? createdDateTime = default(System.DateTime?), string displayName = default(string))
        {
            Id = id;
            DeletedDateTime = deletedDateTime;
            CreatedDateTime = createdDateTime;
            DisplayName = displayName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "deletedDateTime")]
        public System.DateTime? DeletedDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdDateTime")]
        public System.DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for InnerError
    /// </summary>
    /// <remarks>
    /// The root of the InnerError type's schema.
    /// </remarks>
    public partial class GraphInnerError
    {
        /// <summary>
        /// Initializes a new instance of the GraphInnerError class.
        /// </summary>
        public GraphInnerError()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GraphInnerError class.
        /// </summary>
        public GraphInnerError(string requestId = default(string), System.DateTime? date = default(System.DateTime?))
        {
            RequestId = requestId;
            Date = date;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "requestId")]
        public string RequestId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "date")]
        public System.DateTime? Date { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for Error
    /// </summary>
    /// <remarks>
    /// The root of the Error type's schema.
    /// </remarks>
    public partial class GraphError
    {
        /// <summary>
        /// Initializes a new instance of the GraphError class.
        /// </summary>
        public GraphError()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GraphError class.
        /// </summary>
        public GraphError(string code = default(string), string message = default(string), GraphInnerError innerError = default(GraphInnerError))
        {
            Code = code;
            Message = message;
            InnerError = innerError;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "code")]
        public string Code { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "innerError")]
        public GraphInnerError InnerError { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JdaTeams.Connector.MicrosoftGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for ErrorContainer
    /// </summary>
    /// <remarks>
    /// The root of the ErrorContainer type's schema.
    /// </remarks>
    public partial class GraphErrorContainer
    {
        /// <summary>
        /// Initializes a new instance of the GraphErrorContainer class.
        /// </summary>
        public GraphErrorContainer()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GraphErrorContainer class.
        /// </summary>
        public GraphErrorContainer(GraphError error)
        {
            Error = error;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "error")]
        public GraphError Error { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Error == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Error");
            }
        }
    }
}
