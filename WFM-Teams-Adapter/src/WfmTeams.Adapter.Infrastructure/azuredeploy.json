{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "applicationInsightsName": {
      "type": "string",
      "defaultValue": ""
    },
    "applicationStorageAccountName": {
      "type": "string",
      "defaultValue": ""
    },
    "appServicePlanName": {
      "type": "string",
      "defaultValue": ""
    },
    "availabilityFrequencyMinutes": {
      "type": "int",
      "defaultValue": 1440
    },
    "wfmBaseAddress": {
      "type": "string",
      "defaultValue": "https://yoururl.com",
      "minLength": 19
    },
    "clearScheduleEnabled": {
      "type": "bool",
      "defaultValue": false
    },
    "clientId": {
      "type": "string",
      "defaultValue": ""
    },
    "clientSecret": {
      "type": "securestring",
      "defaultValue": ""
    },
    "connectorHealthScheduleExpression": {
      "type": "string",
      "defaultValue": "0 0 * * * *",
      "minLength": 11
    },
    "deleteCacheDataAfterDays": {
      "type": "int",
      "defaultValue": 62
    },
    "draftShiftsEnabled": {
      "type": "bool",
      "defaultValue": true
    },
    "employeeCacheFrequencyMinutes": {
      "type": "int",
      "defaultValue": 30
    },
    "functionsAppName": {
      "type": "string",
      "defaultValue": ""
    },
    "functionsStorageAccountName": {
      "type": "string",
      "defaultValue": ""
    },
    "futureWeeks": {
      "type": "int",
      "defaultValue": 3
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": ""
    },
    "openShiftsFrequencyMinutes": {
      "type": "int",
      "defaultValue": 15
    },
    "orchestratorScheduleExpression": {
      "type": "string",
      "defaultValue": "0 */1 * * * *",
      "minLength": 13
    },
    "pastWeeks": {
      "type": "int",
      "defaultValue": 1
    },
    "redisCacheName": {
      "type": "string",
      "defaultValue": ""
    },
    "shiftsAppUrl": {
      "type": "string",
      "defaultValue": "https://teams.microsoft.com/_#/apps/42f6c1da-a241-483a-a3cc-4f5be9185951/sections/shifts"
    },
    "shiftsFrequencyMinutes": {
      "type": "int",
      "defaultValue": 15
    },
    "startDayOfWeek": {
      "type": "int",
      "defaultValue": 0
    },
    "storeManagerSecurityGroupId": {
      "type": "int",
      "defaultValue": 202
    },
    "taskHubName": {
      "type": "string",
      "defaultValue": "WTATaskHub",
      "minLength": 10
    },
    "tenantId": {
      "type": "string",
      "defaultValue": "00000000-0000-0000-0000-0000000000000",
      "minLength": 36
    },
    "timeOffFrequencyMinutes": {
      "type": "int",
      "defaultValue": 60
    },
    "userPrincipalNameFormatString": {
      "type": "string",
      "defaultValue": "{0}@editme.com"
    },
    "workforceIntegrationDisplayName": {
      "type": "string",
      "defaultValue": "WTA Integration [DEV]",
      "minLength": 1
    },
    "workforceIntegrationSecret": {
      "type": "string",
      "defaultValue": ""
    }
  },
  "variables": {
    "appServicePlanName": "[if(empty(parameters('appServicePlanName')), concat(resourceGroup().name, 'pln'), parameters('appServicePlanName'))]",
    "functionsAppName": "[if(empty(parameters('functionsAppName')), concat(resourceGroup().name, 'fun'), parameters('functionsAppName'))]",
    "functionsStorageAccountName": "[if(empty(parameters('functionsStorageAccountName')), concat(resourceGroup().name, 'fns'), parameters('functionsStorageAccountName'))]",
    "applicationStorageAccountName": "[if(empty(parameters('applicationStorageAccountName')), concat(resourceGroup().name, 'aps'), parameters('applicationStorageAccountName'))]",
    "applicationInsightsName": "[if(empty(parameters('applicationInsightsName')), concat(resourceGroup().name, 'ain'), parameters('applicationInsightsName'))]",
    "keyVaultName": "[if(empty(parameters('keyVaultName')), concat(resourceGroup().name, 'kev'), parameters('keyVaultName'))]",
    "redisCacheName": "[if(empty(parameters('redisCacheName')), concat(resourceGroup().name, 'red'), parameters('redisCacheName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Insights/components",
      "kind": "web",
      "name": "[variables('applicationInsightsName')]",
      "apiVersion": "2015-05-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "Application_Type": "web"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('keyVaultName')]",
      "apiVersion": "2016-10-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "Standard"
        },
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": []
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "Storage",
      "name": "[variables('functionsStorageAccountName')]",
      "apiVersion": "2019-06-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "name": "[variables('applicationStorageAccountName')]",
      "apiVersion": "2019-06-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      }
    },
    {
      "name": "[concat(variables('applicationStorageAccountName'), '/default/app')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-06-01",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('applicationStorageAccountName'))]"
      ]
    },
    {
      "name": "[concat(variables('applicationStorageAccountName'), '/default/requests')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-06-01",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('applicationStorageAccountName'))]"
      ]
    },
    {
      "name": "[concat(variables('applicationStorageAccountName'), '/default/shifts')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-06-01",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('applicationStorageAccountName'))]"
      ]
    },
    {
      "name": "[concat(variables('applicationStorageAccountName'), '/default/system')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-06-01",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('applicationStorageAccountName'))]"
      ]
    },
    {
      "name": "[concat(variables('applicationStorageAccountName'), '/default/timeoff')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-06-01",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('applicationStorageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic",
        "size": "Y1",
        "family": "Y",
        "capacity": 0
      },
      "kind": "functionapp",
      "name": "[variables('appServicePlanName')]",
      "apiVersion": "2016-09-01",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "name": "[variables('appServicePlanName')]"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "kind": "functionapp",
      "name": "[variables('functionsAppName')]",
      "apiVersion": "2018-11-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "siteConfig": {
          "cors": {
            "allowedOrigins": [
              "*"
            ]
          },
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(concat('microsoft.insights/components/', variables('applicationInsightsName')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "AvailabilityFrequencyMinutes",
              "value": "[parameters('availabilityFrequencyMinutes')]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('functionsStorageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('functionsStorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value, ';EndpointSuffix=core.windows.net')]"
            },
            {
              "name": "WfmBaseAddress",
              "value": "[parameters('wfmBaseAddress')]"
            },
            {
              "name": "ClearScheduleEnabled",
              "value": "[parameters('clearScheduleEnabled')]"
            },
            {
              "name": "ClientId",
              "value": "[parameters('clientId')]"
            },
            {
              "name": "ClientSecret",
              "value": "[parameters('clientSecret')]"
            },
            {
              "name": "ConnectionString",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('applicationStorageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('applicationStorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value, ';EndpointSuffix=core.windows.net')]"
            },
            {
              "name": "ConnectorHealthScheduleExpression",
              "value": "[parameters('connectorHealthScheduleExpression')]"
            },
            {
              "name": "DataProtectionBlobUri",
              "value": ""
            },
            {
              "name": "DataProtectionKeyIdentifier",
              "value": ""
            },
            {
              "name": "DraftShiftsEnabled",
              "value": "[parameters('draftShiftsEnabled')]"
            },
            {
              "name": "EmployeeCacheFrequencyMinutes",
              "value": "[parameters('employeeCacheFrequencyMinutes')]"
            },
            {
              "name": "EnableAvailability",
              "value": "false"
            },
            {
              "name": "EnableOpenShifts",
              "value": "false"
            },
            {
              "name": "EnableTimeOff",
              "value": "true"
            },
            {
              "name": "ShiftsFrequencyMinutes",
              "value": "[parameters('shiftsFrequencyMinutes')]"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~2"
            },
            {
              "name": "FutureWeeks",
              "value": "[parameters('futureWeeks')]"
            },
            {
              "name": "KeyVaultConnectionString",
              "value": "[concat('https://', variables('keyVaultName'), '.vault.azure.net')]"
            },
            {
              "name": "OfferShiftRequestsEnabled",
              "value": "false"
            },
            {
              "name": "OpenShiftsEnabled",
              "value": "false"
            },
            {
              "name": "OpenShiftsFrequencyMinutes",
              "value": "[parameters('openShiftsFrequencyMinutes')]"
            },
            {
              "name": "OrchestratorScheduleExpression",
              "value": "[parameters('orchestratorScheduleExpression')]"
            },
            {
              "name": "PastWeeks",
              "value": "[parameters('pastWeeks')]"
            },
            {
              "name": "RedisCacheConnectionString",
              "value": ""
            },
            {
              "name": "ShiftsAppUrl",
              "value": "[parameters('shiftsAppUrl')]"
            },
            {
              "name": "StartDayOfWeek",
              "value": "[parameters('startDayOfWeek')]"
            },
            {
              "name": "SwapShiftsRequestsEnabled",
              "value": "false"
            },
            {
              "name": "TaskHubName",
              "value": "[parameters('taskHubName')]"
            },
            {
              "name": "TenantId",
              "value": "[parameters('tenantId')]"
            },
            {
              "name": "TimeOffFrequencyMinutes",
              "value": "[parameters('timeOffFrequencyMinutes')]"
            },
            {
              "name": "TimeOffRequestsEnabled",
              "value": "false"
            },
            {
              "name": "UserPrincipalNameFormatString",
              "value": "[parameters('userPrincipalNameFormatString')]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('functionsStorageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('functionsStorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value, ';EndpointSuffix=core.windows.net')]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[variables('functionsAppName')]"
            },
            {
              "name": "WorkforceIntegrationDisplayName",
              "value": "[parameters('workforceIntegrationDisplayName')]"
            },
            {
              "name": "WorkforceIntegrationId",
              "value": ""
            },
            {
              "name": "WorkforceIntegrationSecret",
              "value": "[parameters('workforceIntegrationSecret')]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('functionsStorageAccountName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('applicationStorageAccountName'))]",
        "[resourceId('Microsoft.Cache/Redis', variables('redisCacheName'))]"
      ]
    },
    {
      "name": "[concat(variables('applicationStorageAccountName'), '/default')]",
      "type": "Microsoft.Storage/storageAccounts/managementPolicies",
      "apiVersion": "2019-04-01",
      "dependsOn": [
        "[variables('applicationStorageAccountName')]"
      ],
      "properties": {
        "policy": {
          "rules": [
            {
              "name": "expireCachedData",
              "enabled": true,
              "type": "Lifecycle",
              "definition": {
                "filters": {
                  "blobTypes": [
                    "blockBlob"
                  ],
                  "prefixMatch": [
                    "shifts",
                    "requests",
                    "timeoff"
                  ]
                },
                "actions": {
                  "baseBlob": {
                    "delete": {
                      "daysAfterModificationGreaterThan": "[parameters('deleteCacheDataAfterDays')]"
                    }
                  },
                  "snapshot": {
                    "delete": {
                      "daysAfterCreationGreaterThan": "[parameters('deleteCacheDataAfterDays')]"
                    }
                  }
                }
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Cache/Redis",
      "apiVersion": "2017-10-01",
      "name": "[variables('redisCacheName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "sku": {
          "name": "Basic",
          "family": "C",
          "capacity": 2
        },
        "enableNonSslPort": false
      }
    }
  ]
}