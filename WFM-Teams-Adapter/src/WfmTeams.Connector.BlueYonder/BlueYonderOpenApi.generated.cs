// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// All public Blue Yonder v2020.3 API's required for the Teams Shifts
    /// Integration
    /// </summary>
    public partial class BlueYonderClient : ServiceClient<BlueYonderClient>, IBlueYonderClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Initializes a new instance of the BlueYonderClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling BlueYonderClient.Dispose(). False: will not dispose provided httpClient</param>
        public BlueYonderClient(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the BlueYonderClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public BlueYonderClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the BlueYonderClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public BlueYonderClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the BlueYonderClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public BlueYonderClient(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the BlueYonderClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public BlueYonderClient(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            BaseUri = new System.Uri("http://www.jda.com");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }
        /// <summary>
        /// User
        /// </summary>
        /// <remarks>
        /// Gets the user with the specified ID
        /// </remarks>
        /// <param name='employeeId'>
        /// The ID of the user to get
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<User>> GetUserByIdWithHttpMessagesAsync(int employeeId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("employeeId", employeeId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetUserById", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "users/{employeeId}").ToString();
            _url = _url.Replace("{employeeId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(employeeId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<User>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<User>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Job
        /// </summary>
        /// <remarks>
        /// Gets the job with the specified ID
        /// </remarks>
        /// <param name='jobId'>
        /// The ID of the job to get
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<Job>> GetJobByIdWithHttpMessagesAsync(int jobId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobId", jobId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetJobById", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "jobs/{jobId}").ToString();
            _url = _url.Replace("{jobId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(jobId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<Job>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<Job>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Department
        /// </summary>
        /// <remarks>
        /// Gets the department with the specified ID
        /// </remarks>
        /// <param name='departmentId'>
        /// The ID of the department to get
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<Department>> GetDepartmentByIdWithHttpMessagesAsync(int departmentId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("departmentId", departmentId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetDepartmentById", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "departments/{departmentId}/").ToString();
            _url = _url.Replace("{departmentId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(departmentId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<Department>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<Department>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Site
        /// </summary>
        /// <remarks>
        /// Gets the site with the specified ID
        /// </remarks>
        /// <param name='siteId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<Site>> GetSiteByIdWithHttpMessagesAsync(int siteId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("siteId", siteId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetSiteById", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "sites/{siteId}").ToString();
            _url = _url.Replace("{siteId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(siteId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<Site>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<Site>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Users
        /// </summary>
        /// <remarks>
        /// Retrieve a list of users using a list of the users internal IDs
        /// </remarks>
        /// <param name='userIds'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<UserCollection>> GetUsersWithHttpMessagesAsync(IList<string> userIds, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (userIds == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "userIds");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("userIds", userIds);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetUsers", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "users").ToString();
            List<string> _queryParameters = new List<string>();
            if (userIds != null)
            {
                _queryParameters.Add(string.Format("userIds={0}", System.Uri.EscapeDataString(string.Join(",", userIds))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<UserCollection>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<UserCollection>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// List Departments
        /// </summary>
        /// <remarks>
        /// Retrieve all departments for a site using the site’s internal ID.
        /// </remarks>
        /// <param name='siteIdFilter'>
        /// The site's internal ID
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<DepartmentCollection>> ListDepartmentsWithHttpMessagesAsync(int siteIdFilter, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("siteIdFilter", siteIdFilter);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "ListDepartments", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "departments").ToString();
            List<string> _queryParameters = new List<string>();
            _queryParameters.Add(string.Format("siteIdFilter={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(siteIdFilter, SerializationSettings).Trim('"'))));
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<DepartmentCollection>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<DepartmentCollection>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// List Jobs
        /// </summary>
        /// <remarks>
        /// Retrieve all jobs for a site using the site’s internal ID.
        /// </remarks>
        /// <param name='siteIdFilter'>
        /// The internal ID of the site.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<JobCollection>> ListJobsWithHttpMessagesAsync(int siteIdFilter, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("siteIdFilter", siteIdFilter);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "ListJobs", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "jobs").ToString();
            List<string> _queryParameters = new List<string>();
            _queryParameters.Add(string.Format("siteIdFilter={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(siteIdFilter, SerializationSettings).Trim('"'))));
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<JobCollection>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<JobCollection>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Site Employees
        /// </summary>
        /// <remarks>
        /// Gets the assigned employees for the site for the specified labor week.
        /// </remarks>
        /// <param name='siteId'>
        /// </param>
        /// <param name='businessDate'>
        /// The date in format yyyy-mm-dd being any date within the labor week
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<SiteEmployees>> GetSiteEmployeesWithHttpMessagesAsync(int siteId, System.DateTime? businessDate = default(System.DateTime?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("businessDate", businessDate);
                tracingParameters.Add("siteId", siteId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetSiteEmployees", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "clockEmployees/site/{siteId}/laborWeek").ToString();
            _url = _url.Replace("{siteId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(siteId, SerializationSettings).Trim('"')));
            List<string> _queryParameters = new List<string>();
            if (businessDate != null)
            {
                _queryParameters.Add(string.Format("businessDate={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(businessDate, new DateJsonConverter()).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<SiteEmployees>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<SiteEmployees>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Time Off Type
        /// </summary>
        /// <remarks>
        /// Gets the detail for a time off type
        /// </remarks>
        /// <param name='timeOffTypeId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<TimeOffType>> GetTimeOffTypeWithHttpMessagesAsync(int timeOffTypeId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("timeOffTypeId", timeOffTypeId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTimeOffType", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "timeOffTypes/{timeOffTypeId}").ToString();
            _url = _url.Replace("{timeOffTypeId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeOffTypeId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<TimeOffType>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<TimeOffType>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Employee Availability
        /// </summary>
        /// <param name='employeeId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<EmployeeAvailabilityCollectionResource>> GetEmployeeAvailabilityWithHttpMessagesAsync(int employeeId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("employeeId", employeeId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetEmployeeAvailability", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "employeeAvailability").ToString();
            List<string> _queryParameters = new List<string>();
            _queryParameters.Add(string.Format("employeeId={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(employeeId, SerializationSettings).Trim('"'))));
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<EmployeeAvailabilityCollectionResource>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<EmployeeAvailabilityCollectionResource>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Create Employee Availability
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='employeeId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> CreateEmployeeAvailabilityWithHttpMessagesAsync(EmployeeAvailabilityResource body, int? employeeId = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (body == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "body");
            }
            if (body != null)
            {
                body.Validate();
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("body", body);
                tracingParameters.Add("employeeId", employeeId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "CreateEmployeeAvailability", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "employeeAvailability").ToString();
            List<string> _queryParameters = new List<string>();
            if (employeeId != null)
            {
                _queryParameters.Add(string.Format("employeeId={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(employeeId, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(body != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(body, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, System.Text.Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 201 && (int)_statusCode != 409)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 201)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<EmployeeAvailabilityResource>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 409)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<AlternativeErrorResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Unfilled Shifts
        /// </summary>
        /// <param name='siteId'>
        /// </param>
        /// <param name='calendarDateInLaborWeek'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<OpenShiftCollection>> GetUnfilledShiftsWithHttpMessagesAsync(int siteId, string calendarDateInLaborWeek, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (calendarDateInLaborWeek == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "calendarDateInLaborWeek");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("siteId", siteId);
                tracingParameters.Add("calendarDateInLaborWeek", calendarDateInLaborWeek);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetUnfilledShifts", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "scheduledShifts/unfilled/site/{siteId}/laborweek/{calendarDateInLaborWeek}").ToString();
            _url = _url.Replace("{siteId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(siteId, SerializationSettings).Trim('"')));
            _url = _url.Replace("{calendarDateInLaborWeek}", System.Uri.EscapeDataString(calendarDateInLaborWeek));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<OpenShiftCollection>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<OpenShiftCollection>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Create Shift Swap Request
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> CreateShiftSwapRequestWithHttpMessagesAsync(ShiftSwapRequest body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (body == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "body");
            }
            if (body != null)
            {
                body.Validate();
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("body", body);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "CreateShiftSwapRequest", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "mySwapShifts").ToString();
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(body != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(body, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, System.Text.Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 201 && (int)_statusCode != 409)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 201)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<ShiftSwapResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 409)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<ErrorResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Recipient approves shift swap.
        /// </summary>
        /// <remarks>
        /// Allows the recipient of the given swap request to approve, setting the
        /// request status to 'Awaiting Manager Approval'.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='swapRequestId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> RecipientApproveShiftSwapWithHttpMessagesAsync(SwapShiftRequestResource body, string swapRequestId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (body == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "body");
            }
            if (swapRequestId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "swapRequestId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("body", body);
                tracingParameters.Add("swapRequestId", swapRequestId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "RecipientApproveShiftSwap", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "mySwapShifts/{swapRequestId}").ToString();
            _url = _url.Replace("{swapRequestId}", System.Uri.EscapeDataString(swapRequestId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(body != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(body, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, System.Text.Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 409)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<SwapShiftRequestResource>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 409)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<ErrorResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Cancel shift swap.
        /// </summary>
        /// <param name='swapRequestId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> CancelShiftSwapWithHttpMessagesAsync(string swapRequestId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (swapRequestId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "swapRequestId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("swapRequestId", swapRequestId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "CancelShiftSwap", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "mySwapShifts/{swapRequestId}").ToString();
            _url = _url.Replace("{swapRequestId}", System.Uri.EscapeDataString(swapRequestId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("DELETE");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 404 && (int)_statusCode != 409)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<ShiftSwapResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 404)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<ErrorResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 409)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<ErrorResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Request Open Shift
        /// </summary>
        /// <remarks>
        /// Allow the requester to claim open shift.
        /// </remarks>
        /// <param name='shiftId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> RequestOpenShiftWithHttpMessagesAsync(string shiftId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (shiftId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "shiftId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("shiftId", shiftId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "RequestOpenShift", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "myAvailableShifts/{shiftId}/claim").ToString();
            _url = _url.Replace("{shiftId}", System.Uri.EscapeDataString(shiftId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 404 && (int)_statusCode != 409)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<RequestOpenShiftResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 404)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<AlternativeErrorResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 409)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<ErrorResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Assign an open shift to an employee
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='scheduledShiftId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> AssignOpenShiftWithHttpMessagesAsync(AssignOpenShiftRequest body, int scheduledShiftId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (body == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "body");
            }
            if (body != null)
            {
                body.Validate();
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("body", body);
                tracingParameters.Add("scheduledShiftId", scheduledShiftId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "AssignOpenShift", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "scheduledShifts/{scheduledShiftId}/availableShift").ToString();
            _url = _url.Replace("{scheduledShiftId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(scheduledShiftId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(body != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(body, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, System.Text.Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 409)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<ScheduledShift>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 409)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<AlternativeErrorResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get My Available Shifts For Week
        /// </summary>
        /// <param name='calendarDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<MyAvailableShiftsCollectionResource>> GetMyAvailableShiftsForWeekWithHttpMessagesAsync(string calendarDate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (calendarDate == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "calendarDate");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("calendarDate", calendarDate);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetMyAvailableShiftsForWeek", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "myAvailableShifts/{calendarDate}").ToString();
            _url = _url.Replace("{calendarDate}", System.Uri.EscapeDataString(calendarDate));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<MyAvailableShiftsCollectionResource>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<MyAvailableShiftsCollectionResource>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Provides eligible Shifts which can be swappable for the given scheduled
        /// shift Id
        /// </summary>
        /// <param name='shiftId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<SwappableShiftCollectionResponse>> GetAvailableSwapShiftsWithHttpMessagesAsync(string shiftId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (shiftId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "shiftId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("shiftId", shiftId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetAvailableSwapShifts", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "mySchedule/{shiftId}/availableSwapShifts").ToString();
            _url = _url.Replace("{shiftId}", System.Uri.EscapeDataString(shiftId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<SwappableShiftCollectionResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<SwappableShiftCollectionResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get the sites pending approvals.
        /// </summary>
        /// <remarks>
        /// List all of the various types of pending approvals for the given site from
        /// the current date.
        /// </remarks>
        /// <param name='siteId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PendingApprovals>> GetSiteApprovalsWithHttpMessagesAsync(string siteId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (siteId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "siteId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("siteId", siteId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetSiteApprovals", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{siteId}/pendingApprovals").ToString();
            _url = _url.Replace("{siteId}", System.Uri.EscapeDataString(siteId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PendingApprovals>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PendingApprovals>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Approve the given shift swap.
        /// </summary>
        /// <param name='siteId'>
        /// </param>
        /// <param name='swapShiftId'>
        /// </param>
        /// <param name='swappeeScheduledShiftId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> ApproveShiftSwapWithHttpMessagesAsync(string siteId, string swapShiftId, string swappeeScheduledShiftId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (siteId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "siteId");
            }
            if (swapShiftId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "swapShiftId");
            }
            if (swappeeScheduledShiftId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "swappeeScheduledShiftId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("siteId", siteId);
                tracingParameters.Add("swapShiftId", swapShiftId);
                tracingParameters.Add("swappeeScheduledShiftId", swappeeScheduledShiftId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "ApproveShiftSwap", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{siteId}/pendingApprovals/swapShifts/{swapShiftId}/swappeeScheduledShifts/{swappeeScheduledShiftId}/approval").ToString();
            _url = _url.Replace("{siteId}", System.Uri.EscapeDataString(siteId));
            _url = _url.Replace("{swapShiftId}", System.Uri.EscapeDataString(swapShiftId));
            _url = _url.Replace("{swappeeScheduledShiftId}", System.Uri.EscapeDataString(swappeeScheduledShiftId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 404 && (int)_statusCode != 409)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<SwapShiftSummaryResource>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 404)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<ErrorResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 409)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<ErrorResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Deny the shift swap request.
        /// </summary>
        /// <param name='siteId'>
        /// </param>
        /// <param name='swapShiftId'>
        /// </param>
        /// <param name='swappeeScheduledShiftId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> DenyShiftSwapWithHttpMessagesAsync(string siteId, string swapShiftId, string swappeeScheduledShiftId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (siteId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "siteId");
            }
            if (swapShiftId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "swapShiftId");
            }
            if (swappeeScheduledShiftId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "swappeeScheduledShiftId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("siteId", siteId);
                tracingParameters.Add("swapShiftId", swapShiftId);
                tracingParameters.Add("swappeeScheduledShiftId", swappeeScheduledShiftId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "DenyShiftSwap", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{siteId}/pendingApprovals/swapShifts/{swapShiftId}/swappeeScheduledShifts/{swappeeScheduledShiftId}/denial").ToString();
            _url = _url.Replace("{siteId}", System.Uri.EscapeDataString(siteId));
            _url = _url.Replace("{swapShiftId}", System.Uri.EscapeDataString(swapShiftId));
            _url = _url.Replace("{swappeeScheduledShiftId}", System.Uri.EscapeDataString(swappeeScheduledShiftId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 404 && (int)_statusCode != 409)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<SwapShiftSummaryResource>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 404)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<ErrorResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 409)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<ErrorResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get My Info
        /// </summary>
        /// <remarks>
        /// Gets the info for the logged in employee
        /// </remarks>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<EmployeeInfo>> GetMyInfoWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetMyInfo", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "myInfo").ToString();
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<EmployeeInfo>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<EmployeeInfo>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Site Info
        /// </summary>
        /// <remarks>
        /// Gets the site information
        /// </remarks>
        /// <param name='siteId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> GetSiteInfoWithHttpMessagesAsync(string siteId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (siteId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "siteId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("siteId", siteId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetSiteInfo", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{siteId}/siteInfo").ToString();
            _url = _url.Replace("{siteId}", System.Uri.EscapeDataString(siteId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<SiteInfo>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 404)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<Error>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// WeekShifts
        /// </summary>
        /// <remarks>
        /// Gets the full set of shifts for the specified site and week. If no
        /// businessDate is specified then the method returns the data for the current
        /// week.
        /// </remarks>
        /// <param name='siteId'>
        /// The ID of the site to get the scheduled shifts for.
        /// </param>
        /// <param name='businessDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<WeekShifts>> GetSiteShiftsForWeekWithHttpMessagesAsync(int siteId, string businessDate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (businessDate == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "businessDate");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("siteId", siteId);
                tracingParameters.Add("businessDate", businessDate);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetSiteShiftsForWeek", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "scheduledShifts/site/{siteId}/laborWeek/{businessDate}").ToString();
            _url = _url.Replace("{siteId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(siteId, SerializationSettings).Trim('"')));
            _url = _url.Replace("{businessDate}", System.Uri.EscapeDataString(businessDate));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<WeekShifts>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<WeekShifts>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Employee shifts for week
        /// </summary>
        /// <remarks>
        /// Gets the full set of shifts for the specified employee and week. If no
        /// businessDate is specified then the method returns the data for the current
        /// week.
        /// </remarks>
        /// <param name='employeeId'>
        /// </param>
        /// <param name='businessDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<WeekShifts>> GetEmployeeShiftsForWeekWithHttpMessagesAsync(int employeeId, string businessDate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (businessDate == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "businessDate");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("employeeId", employeeId);
                tracingParameters.Add("businessDate", businessDate);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetEmployeeShiftsForWeek", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "scheduledShifts/employee/{employeeId}/laborWeek/{businessDate}").ToString();
            _url = _url.Replace("{employeeId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(employeeId, SerializationSettings).Trim('"')));
            _url = _url.Replace("{businessDate}", System.Uri.EscapeDataString(businessDate));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<WeekShifts>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<WeekShifts>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get All Sites
        /// </summary>
        /// <remarks>
        /// Gets the list of all sites.
        /// </remarks>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<SiteCollectionResource>> ListSitesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "ListSites", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "sites").ToString();
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<SiteCollectionResource>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<SiteCollectionResource>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get All Time Zones
        /// </summary>
        /// <remarks>
        /// Get all the configured time zones
        /// </remarks>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<TimeZoneCollectionResource>> ListTimeZonesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "ListTimeZones", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "timeZones").ToString();
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<TimeZoneCollectionResource>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<TimeZoneCollectionResource>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Time Off Requests For Week
        /// </summary>
        /// <remarks>
        /// Gets all the time off requests for the employees in the site for a labour
        /// week.
        /// </remarks>
        /// <param name='siteId'>
        /// </param>
        /// <param name='dateinLaborWeek'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<EmployeeTimeOffCollectionResource>> GetTimeOffRequestsForWeekWithHttpMessagesAsync(string siteId, string dateinLaborWeek, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (siteId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "siteId");
            }
            if (dateinLaborWeek == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "dateinLaborWeek");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("siteId", siteId);
                tracingParameters.Add("dateinLaborWeek", dateinLaborWeek);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTimeOffRequestsForWeek", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{siteId}/timeOffRequests/laborWeek/{dateinLaborWeek}").ToString();
            _url = _url.Replace("{siteId}", System.Uri.EscapeDataString(siteId));
            _url = _url.Replace("{dateinLaborWeek}", System.Uri.EscapeDataString(dateinLaborWeek));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<EmployeeTimeOffCollectionResource>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<EmployeeTimeOffCollectionResource>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get My Shift Swap Requests
        /// </summary>
        /// <remarks>
        /// Gets all of the swap requests for this employee.
        /// </remarks>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<SwapShiftRequestCollectionResource>> GetMyShiftSwapRequestsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetMyShiftSwapRequests", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "mySwapShifts/requestedByMe").ToString();
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<SwapShiftRequestCollectionResource>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<SwapShiftRequestCollectionResource>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get swap shift summary
        /// </summary>
        /// <remarks>
        /// Get swap shift summary by internal id.
        /// </remarks>
        /// <param name='siteId'>
        /// </param>
        /// <param name='swapShiftId'>
        /// </param>
        /// <param name='swappeeScheduledShiftId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<SwapShiftSummaryResource>> GetSwapShiftSummaryWithHttpMessagesAsync(string siteId, string swapShiftId, string swappeeScheduledShiftId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (siteId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "siteId");
            }
            if (swapShiftId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "swapShiftId");
            }
            if (swappeeScheduledShiftId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "swappeeScheduledShiftId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("siteId", siteId);
                tracingParameters.Add("swapShiftId", swapShiftId);
                tracingParameters.Add("swappeeScheduledShiftId", swappeeScheduledShiftId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetSwapShiftSummary", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{siteId}/pendingApprovals/swapShifts/{swapShiftId}/swappeeScheduledShifts/{swappeeScheduledShiftId}").ToString();
            _url = _url.Replace("{siteId}", System.Uri.EscapeDataString(siteId));
            _url = _url.Replace("{swapShiftId}", System.Uri.EscapeDataString(swapShiftId));
            _url = _url.Replace("{swappeeScheduledShiftId}", System.Uri.EscapeDataString(swappeeScheduledShiftId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<SwapShiftSummaryResource>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<SwapShiftSummaryResource>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get all shift offers for that user for a given date.
        /// </summary>
        /// <param name='calendarDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<ShiftOffersCollectionResource>> GetShiftOffersWithHttpMessagesAsync(string calendarDate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (calendarDate == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "calendarDate");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("calendarDate", calendarDate);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetShiftOffers", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "myShiftOffers/calendarDate/{calendarDate}").ToString();
            _url = _url.Replace("{calendarDate}", System.Uri.EscapeDataString(calendarDate));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<ShiftOffersCollectionResource>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<ShiftOffersCollectionResource>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// List Site Employees
        /// </summary>
        /// <param name='siteId'>
        /// </param>
        /// <param name='containingBusinessDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<SchedulingEmployeeCollectionResource>> ListSiteEmployeesWithHttpMessagesAsync(string siteId, string containingBusinessDate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (siteId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "siteId");
            }
            if (containingBusinessDate == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "containingBusinessDate");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("siteId", siteId);
                tracingParameters.Add("containingBusinessDate", containingBusinessDate);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "ListSiteEmployees", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{siteId}/scheduling/employees/laborWeek/{containingBusinessDate}").ToString();
            _url = _url.Replace("{siteId}", System.Uri.EscapeDataString(siteId));
            _url = _url.Replace("{containingBusinessDate}", System.Uri.EscapeDataString(containingBusinessDate));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<SchedulingEmployeeCollectionResource>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<SchedulingEmployeeCollectionResource>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Create Time Off Request
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='ignoreWarnings'>
        /// Comma separated list of warnings that should be ignored from the list
        /// RequestLongerThanClientSetting, BlackoutPeriodOverlap and
        /// AccrualBalanceViolation or * to ignore all three warnings.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> CreateTimeOffRequestWithHttpMessagesAsync(TimeOffRequestResource body, string ignoreWarnings = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (body == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "body");
            }
            if (body != null)
            {
                body.Validate();
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("body", body);
                tracingParameters.Add("ignoreWarnings", ignoreWarnings);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "CreateTimeOffRequest", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "timeOffRequests").ToString();
            List<string> _queryParameters = new List<string>();
            if (ignoreWarnings != null)
            {
                _queryParameters.Add(string.Format("ignoreWarnings={0}", System.Uri.EscapeDataString(ignoreWarnings)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(body != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(body, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, System.Text.Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 201 && (int)_statusCode != 409)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 201)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<TimeOffRequestResource>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 409)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<AlternativeErrorResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Time Off Type By Name
        /// </summary>
        /// <param name='name'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> GetTimeOffTypeByNameWithHttpMessagesAsync(string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "name");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("name", name);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTimeOffTypeByName", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "timeOffTypes").ToString();
            List<string> _queryParameters = new List<string>();
            if (name != null)
            {
                _queryParameters.Add(string.Format("name={0}", System.Uri.EscapeDataString(name)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<TimeOffType>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 404)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<AlternativeErrorResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// List Adjustment Categories
        /// </summary>
        /// <remarks>
        /// Gets the full list of adjustment categories that have been defined in Blue
        /// Yonder including time off reasons.
        /// </remarks>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<AdjustmentCategoryCollectionResource>> ListAdjustmentCategoriesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "ListAdjustmentCategories", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "adjustmentCategory").ToString();
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<AdjustmentCategoryCollectionResource>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<AdjustmentCategoryCollectionResource>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Time Off Request
        /// </summary>
        /// <remarks>
        /// Gets the time off request with the specified Id
        /// </remarks>
        /// <param name='timeOffRequestId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> GetTimeOffRequestWithHttpMessagesAsync(int timeOffRequestId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("timeOffRequestId", timeOffRequestId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTimeOffRequest", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "timeOffRequests/{timeOffRequestId}").ToString();
            _url = _url.Replace("{timeOffRequestId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeOffRequestId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 409)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<TimeOffRequestResource>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 409)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<AlternativeErrorResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Update Time Off Request
        /// </summary>
        /// <remarks>
        /// Updates the specified time off request.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='timeOffRequestId'>
        /// </param>
        /// <param name='ignoreWarnings'>
        /// Can specify which individual warnings out of
        /// (RequestLongerThanClientSetting, BlackoutPeriodOverlap and
        /// AccrualBalanceViolation) should be ignored (comma-separated list) or use
        /// all to specify all 3 warnings should be ignored.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> UpdateTimeOffRequestWithHttpMessagesAsync(TimeOffRequestResource body, int timeOffRequestId, string ignoreWarnings = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (body == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "body");
            }
            if (body != null)
            {
                body.Validate();
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("ignoreWarnings", ignoreWarnings);
                tracingParameters.Add("body", body);
                tracingParameters.Add("timeOffRequestId", timeOffRequestId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "UpdateTimeOffRequest", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "timeOffRequests/{timeOffRequestId}").ToString();
            _url = _url.Replace("{timeOffRequestId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeOffRequestId, SerializationSettings).Trim('"')));
            List<string> _queryParameters = new List<string>();
            if (ignoreWarnings != null)
            {
                _queryParameters.Add(string.Format("ignoreWarnings={0}", System.Uri.EscapeDataString(ignoreWarnings)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(body != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(body, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, System.Text.Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 409)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<TimeOffRequestResource>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 409)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<AlternativeErrorResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Employee shifts for that business date.
        /// </summary>
        /// <remarks>
        /// Gets all of the employees shifts for the specified business date.
        /// </remarks>
        /// <param name='employeeId'>
        /// </param>
        /// <param name='businessDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<EmployeeScheduledShiftCollectionResource>> GetEmployeeShiftsForBusinessDateWithHttpMessagesAsync(int employeeId, string businessDate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (businessDate == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "businessDate");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("employeeId", employeeId);
                tracingParameters.Add("businessDate", businessDate);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetEmployeeShiftsForBusinessDate", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "scheduledShifts/employee/{employeeId}/businessDate/{businessDate}").ToString();
            _url = _url.Replace("{employeeId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(employeeId, SerializationSettings).Trim('"')));
            _url = _url.Replace("{businessDate}", System.Uri.EscapeDataString(businessDate));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<EmployeeScheduledShiftCollectionResource>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<EmployeeScheduledShiftCollectionResource>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Scheduled Shift
        /// </summary>
        /// <param name='scheduledShiftId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<ScheduledShift>> GetScheduledShiftWithHttpMessagesAsync(int scheduledShiftId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("scheduledShiftId", scheduledShiftId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetScheduledShift", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "scheduledShifts/{scheduledShiftId}").ToString();
            _url = _url.Replace("{scheduledShiftId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(scheduledShiftId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<ScheduledShift>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<ScheduledShift>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Retrieves pay period configurations for that effective from date and site.
        /// </summary>
        /// <param name='siteIdFilter'>
        /// </param>
        /// <param name='effectiveDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> GetPayPeriodConfigurationsWithHttpMessagesAsync(string siteIdFilter, string effectiveDate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (siteIdFilter == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "siteIdFilter");
            }
            if (effectiveDate == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "effectiveDate");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("siteIdFilter", siteIdFilter);
                tracingParameters.Add("effectiveDate", effectiveDate);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetPayPeriodConfigurations", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "payPeriodConfigurations").ToString();
            List<string> _queryParameters = new List<string>();
            if (siteIdFilter != null)
            {
                _queryParameters.Add(string.Format("siteIdFilter={0}", System.Uri.EscapeDataString(siteIdFilter)));
            }
            if (effectiveDate != null)
            {
                _queryParameters.Add(string.Format("effectiveDate={0}", System.Uri.EscapeDataString(effectiveDate)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PayPeriodConfigurationResource>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 404)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<AlternativeErrorResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Employee Time Off By Year
        /// </summary>
        /// <remarks>
        /// Get List of Time Off Requests for the given employee's internal Id in a
        /// specific year.
        /// </remarks>
        /// <param name='employeeId'>
        /// The employee’s internal Id
        /// </param>
        /// <param name='year'>
        /// Calender year
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<TimeOffRequestCollectionResource>> GetEmployeeTimeOffByYearWithHttpMessagesAsync(int employeeId, int year, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("employeeId", employeeId);
                tracingParameters.Add("year", year);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetEmployeeTimeOffByYear", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "timeOffRequests/employees/{employeeId}/years/{year}").ToString();
            _url = _url.Replace("{employeeId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(employeeId, SerializationSettings).Trim('"')));
            _url = _url.Replace("{year}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(year, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<TimeOffRequestCollectionResource>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<TimeOffRequestCollectionResource>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Time Off Request By Id
        /// </summary>
        /// <remarks>
        /// Gets the Time Off Request for the given timeOffRequestId.
        /// </remarks>
        /// <param name='siteId'>
        /// </param>
        /// <param name='timeOffRequestId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<EmployeeTimeOffResource>> GetTimeOffRequestByIdWithHttpMessagesAsync(string siteId, string timeOffRequestId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (siteId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "siteId");
            }
            if (timeOffRequestId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "timeOffRequestId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("siteId", siteId);
                tracingParameters.Add("timeOffRequestId", timeOffRequestId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTimeOffRequestById", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{siteId}/timeOffRequests/{timeOffRequestId}").ToString();
            _url = _url.Replace("{siteId}", System.Uri.EscapeDataString(siteId));
            _url = _url.Replace("{timeOffRequestId}", System.Uri.EscapeDataString(timeOffRequestId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<EmployeeTimeOffResource>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<EmployeeTimeOffResource>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Time Zone By Id
        /// </summary>
        /// <remarks>
        /// Get the timeZone with a specified ID.
        /// </remarks>
        /// <param name='timeZoneId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<SiteTimeZone>> GetTimeZoneByIdWithHttpMessagesAsync(int timeZoneId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("timeZoneId", timeZoneId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTimeZoneById", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "timeZones/{timeZoneId}").ToString();
            _url = _url.Replace("{timeZoneId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<SiteTimeZone>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<SiteTimeZone>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// All public Blue Yonder v2020.3 API's required for the Teams Shifts
    /// Integration
    /// </summary>
    public partial interface IBlueYonderClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


        /// <summary>
        /// User
        /// </summary>
        /// <remarks>
        /// Gets the user with the specified ID
        /// </remarks>
        /// <param name='employeeId'>
        /// The ID of the user to get
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<User>> GetUserByIdWithHttpMessagesAsync(int employeeId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Job
        /// </summary>
        /// <remarks>
        /// Gets the job with the specified ID
        /// </remarks>
        /// <param name='jobId'>
        /// The ID of the job to get
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Job>> GetJobByIdWithHttpMessagesAsync(int jobId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Department
        /// </summary>
        /// <remarks>
        /// Gets the department with the specified ID
        /// </remarks>
        /// <param name='departmentId'>
        /// The ID of the department to get
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Department>> GetDepartmentByIdWithHttpMessagesAsync(int departmentId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Site
        /// </summary>
        /// <remarks>
        /// Gets the site with the specified ID
        /// </remarks>
        /// <param name='siteId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Site>> GetSiteByIdWithHttpMessagesAsync(int siteId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Users
        /// </summary>
        /// <remarks>
        /// Retrieve a list of users using a list of the users internal IDs
        /// </remarks>
        /// <param name='userIds'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserCollection>> GetUsersWithHttpMessagesAsync(IList<string> userIds, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Departments
        /// </summary>
        /// <remarks>
        /// Retrieve all departments for a site using the site’s internal ID.
        /// </remarks>
        /// <param name='siteIdFilter'>
        /// The site's internal ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DepartmentCollection>> ListDepartmentsWithHttpMessagesAsync(int siteIdFilter, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Jobs
        /// </summary>
        /// <remarks>
        /// Retrieve all jobs for a site using the site’s internal ID.
        /// </remarks>
        /// <param name='siteIdFilter'>
        /// The internal ID of the site.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<JobCollection>> ListJobsWithHttpMessagesAsync(int siteIdFilter, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Site Employees
        /// </summary>
        /// <remarks>
        /// Gets the assigned employees for the site for the specified labor
        /// week.
        /// </remarks>
        /// <param name='siteId'>
        /// </param>
        /// <param name='businessDate'>
        /// The date in format yyyy-mm-dd being any date within the labor week
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SiteEmployees>> GetSiteEmployeesWithHttpMessagesAsync(int siteId, System.DateTime? businessDate = default(System.DateTime?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Time Off Type
        /// </summary>
        /// <remarks>
        /// Gets the detail for a time off type
        /// </remarks>
        /// <param name='timeOffTypeId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TimeOffType>> GetTimeOffTypeWithHttpMessagesAsync(int timeOffTypeId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Employee Availability
        /// </summary>
        /// <param name='employeeId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EmployeeAvailabilityCollectionResource>> GetEmployeeAvailabilityWithHttpMessagesAsync(int employeeId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Employee Availability
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='employeeId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateEmployeeAvailabilityWithHttpMessagesAsync(EmployeeAvailabilityResource body, int? employeeId = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Unfilled Shifts
        /// </summary>
        /// <param name='siteId'>
        /// </param>
        /// <param name='calendarDateInLaborWeek'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<OpenShiftCollection>> GetUnfilledShiftsWithHttpMessagesAsync(int siteId, string calendarDateInLaborWeek, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Shift Swap Request
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateShiftSwapRequestWithHttpMessagesAsync(ShiftSwapRequest body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Recipient approves shift swap.
        /// </summary>
        /// <remarks>
        /// Allows the recipient of the given swap request to approve, setting
        /// the request status to 'Awaiting Manager Approval'.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='swapRequestId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> RecipientApproveShiftSwapWithHttpMessagesAsync(SwapShiftRequestResource body, string swapRequestId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel shift swap.
        /// </summary>
        /// <param name='swapRequestId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CancelShiftSwapWithHttpMessagesAsync(string swapRequestId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Request Open Shift
        /// </summary>
        /// <remarks>
        /// Allow the requester to claim open shift.
        /// </remarks>
        /// <param name='shiftId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> RequestOpenShiftWithHttpMessagesAsync(string shiftId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Assign an open shift to an employee
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='scheduledShiftId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> AssignOpenShiftWithHttpMessagesAsync(AssignOpenShiftRequest body, int scheduledShiftId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get My Available Shifts For Week
        /// </summary>
        /// <param name='calendarDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MyAvailableShiftsCollectionResource>> GetMyAvailableShiftsForWeekWithHttpMessagesAsync(string calendarDate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Provides eligible Shifts which can be swappable for the given
        /// scheduled shift Id
        /// </summary>
        /// <param name='shiftId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SwappableShiftCollectionResponse>> GetAvailableSwapShiftsWithHttpMessagesAsync(string shiftId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the sites pending approvals.
        /// </summary>
        /// <remarks>
        /// List all of the various types of pending approvals for the given
        /// site from the current date.
        /// </remarks>
        /// <param name='siteId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PendingApprovals>> GetSiteApprovalsWithHttpMessagesAsync(string siteId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Approve the given shift swap.
        /// </summary>
        /// <param name='siteId'>
        /// </param>
        /// <param name='swapShiftId'>
        /// </param>
        /// <param name='swappeeScheduledShiftId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ApproveShiftSwapWithHttpMessagesAsync(string siteId, string swapShiftId, string swappeeScheduledShiftId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deny the shift swap request.
        /// </summary>
        /// <param name='siteId'>
        /// </param>
        /// <param name='swapShiftId'>
        /// </param>
        /// <param name='swappeeScheduledShiftId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DenyShiftSwapWithHttpMessagesAsync(string siteId, string swapShiftId, string swappeeScheduledShiftId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get My Info
        /// </summary>
        /// <remarks>
        /// Gets the info for the logged in employee
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EmployeeInfo>> GetMyInfoWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Site Info
        /// </summary>
        /// <remarks>
        /// Gets the site information
        /// </remarks>
        /// <param name='siteId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetSiteInfoWithHttpMessagesAsync(string siteId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// WeekShifts
        /// </summary>
        /// <remarks>
        /// Gets the full set of shifts for the specified site and week. If no
        /// businessDate is specified then the method returns the data for the
        /// current week.
        /// </remarks>
        /// <param name='siteId'>
        /// The ID of the site to get the scheduled shifts for.
        /// </param>
        /// <param name='businessDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<WeekShifts>> GetSiteShiftsForWeekWithHttpMessagesAsync(int siteId, string businessDate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Employee shifts for week
        /// </summary>
        /// <remarks>
        /// Gets the full set of shifts for the specified employee and week. If
        /// no businessDate is specified then the method returns the data for
        /// the current week.
        /// </remarks>
        /// <param name='employeeId'>
        /// </param>
        /// <param name='businessDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<WeekShifts>> GetEmployeeShiftsForWeekWithHttpMessagesAsync(int employeeId, string businessDate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get All Sites
        /// </summary>
        /// <remarks>
        /// Gets the list of all sites.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SiteCollectionResource>> ListSitesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get All Time Zones
        /// </summary>
        /// <remarks>
        /// Get all the configured time zones
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TimeZoneCollectionResource>> ListTimeZonesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Time Off Requests For Week
        /// </summary>
        /// <remarks>
        /// Gets all the time off requests for the employees in the site for a
        /// labour week.
        /// </remarks>
        /// <param name='siteId'>
        /// </param>
        /// <param name='dateinLaborWeek'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EmployeeTimeOffCollectionResource>> GetTimeOffRequestsForWeekWithHttpMessagesAsync(string siteId, string dateinLaborWeek, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get My Shift Swap Requests
        /// </summary>
        /// <remarks>
        /// Gets all of the swap requests for this employee.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SwapShiftRequestCollectionResource>> GetMyShiftSwapRequestsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get swap shift summary
        /// </summary>
        /// <remarks>
        /// Get swap shift summary by internal id.
        /// </remarks>
        /// <param name='siteId'>
        /// </param>
        /// <param name='swapShiftId'>
        /// </param>
        /// <param name='swappeeScheduledShiftId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SwapShiftSummaryResource>> GetSwapShiftSummaryWithHttpMessagesAsync(string siteId, string swapShiftId, string swappeeScheduledShiftId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all shift offers for that user for a given date.
        /// </summary>
        /// <param name='calendarDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ShiftOffersCollectionResource>> GetShiftOffersWithHttpMessagesAsync(string calendarDate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Site Employees
        /// </summary>
        /// <param name='siteId'>
        /// </param>
        /// <param name='containingBusinessDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SchedulingEmployeeCollectionResource>> ListSiteEmployeesWithHttpMessagesAsync(string siteId, string containingBusinessDate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Time Off Request
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='ignoreWarnings'>
        /// Comma separated list of warnings that should be ignored from the
        /// list RequestLongerThanClientSetting, BlackoutPeriodOverlap and
        /// AccrualBalanceViolation or * to ignore all three warnings.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateTimeOffRequestWithHttpMessagesAsync(TimeOffRequestResource body, string ignoreWarnings = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Time Off Type By Name
        /// </summary>
        /// <param name='name'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetTimeOffTypeByNameWithHttpMessagesAsync(string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Adjustment Categories
        /// </summary>
        /// <remarks>
        /// Gets the full list of adjustment categories that have been defined
        /// in Blue Yonder including time off reasons.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AdjustmentCategoryCollectionResource>> ListAdjustmentCategoriesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Time Off Request
        /// </summary>
        /// <remarks>
        /// Gets the time off request with the specified Id
        /// </remarks>
        /// <param name='timeOffRequestId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetTimeOffRequestWithHttpMessagesAsync(int timeOffRequestId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Time Off Request
        /// </summary>
        /// <remarks>
        /// Updates the specified time off request.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='timeOffRequestId'>
        /// </param>
        /// <param name='ignoreWarnings'>
        /// Can specify which individual warnings out of
        /// (RequestLongerThanClientSetting, BlackoutPeriodOverlap and
        /// AccrualBalanceViolation) should be ignored (comma-separated list)
        /// or use all to specify all 3 warnings should be ignored.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdateTimeOffRequestWithHttpMessagesAsync(TimeOffRequestResource body, int timeOffRequestId, string ignoreWarnings = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Employee shifts for that business date.
        /// </summary>
        /// <remarks>
        /// Gets all of the employees shifts for the specified business date.
        /// </remarks>
        /// <param name='employeeId'>
        /// </param>
        /// <param name='businessDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EmployeeScheduledShiftCollectionResource>> GetEmployeeShiftsForBusinessDateWithHttpMessagesAsync(int employeeId, string businessDate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Scheduled Shift
        /// </summary>
        /// <param name='scheduledShiftId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ScheduledShift>> GetScheduledShiftWithHttpMessagesAsync(int scheduledShiftId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves pay period configurations for that effective from date
        /// and site.
        /// </summary>
        /// <param name='siteIdFilter'>
        /// </param>
        /// <param name='effectiveDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetPayPeriodConfigurationsWithHttpMessagesAsync(string siteIdFilter, string effectiveDate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Employee Time Off By Year
        /// </summary>
        /// <remarks>
        /// Get List of Time Off Requests for the given employee's internal Id
        /// in a specific year.
        /// </remarks>
        /// <param name='employeeId'>
        /// The employee’s internal Id
        /// </param>
        /// <param name='year'>
        /// Calender year
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TimeOffRequestCollectionResource>> GetEmployeeTimeOffByYearWithHttpMessagesAsync(int employeeId, int year, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Time Off Request By Id
        /// </summary>
        /// <remarks>
        /// Gets the Time Off Request for the given timeOffRequestId.
        /// </remarks>
        /// <param name='siteId'>
        /// </param>
        /// <param name='timeOffRequestId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EmployeeTimeOffResource>> GetTimeOffRequestByIdWithHttpMessagesAsync(string siteId, string timeOffRequestId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Time Zone By Id
        /// </summary>
        /// <remarks>
        /// Get the timeZone with a specified ID.
        /// </remarks>
        /// <param name='timeZoneId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SiteTimeZone>> GetTimeZoneByIdWithHttpMessagesAsync(int timeZoneId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BlueYonderClient.
    /// </summary>
    public static partial class BlueYonderClientExtensions
    {
            /// <summary>
            /// User
            /// </summary>
            /// <remarks>
            /// Gets the user with the specified ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='employeeId'>
            /// The ID of the user to get
            /// </param>
            public static User GetUserById(this IBlueYonderClient operations, int employeeId)
            {
                return operations.GetUserByIdAsync(employeeId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// User
            /// </summary>
            /// <remarks>
            /// Gets the user with the specified ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='employeeId'>
            /// The ID of the user to get
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> GetUserByIdAsync(this IBlueYonderClient operations, int employeeId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserByIdWithHttpMessagesAsync(employeeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Job
            /// </summary>
            /// <remarks>
            /// Gets the job with the specified ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// The ID of the job to get
            /// </param>
            public static Job GetJobById(this IBlueYonderClient operations, int jobId)
            {
                return operations.GetJobByIdAsync(jobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Job
            /// </summary>
            /// <remarks>
            /// Gets the job with the specified ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// The ID of the job to get
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Job> GetJobByIdAsync(this IBlueYonderClient operations, int jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetJobByIdWithHttpMessagesAsync(jobId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Department
            /// </summary>
            /// <remarks>
            /// Gets the department with the specified ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='departmentId'>
            /// The ID of the department to get
            /// </param>
            public static Department GetDepartmentById(this IBlueYonderClient operations, int departmentId)
            {
                return operations.GetDepartmentByIdAsync(departmentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Department
            /// </summary>
            /// <remarks>
            /// Gets the department with the specified ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='departmentId'>
            /// The ID of the department to get
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Department> GetDepartmentByIdAsync(this IBlueYonderClient operations, int departmentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDepartmentByIdWithHttpMessagesAsync(departmentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Site
            /// </summary>
            /// <remarks>
            /// Gets the site with the specified ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// </param>
            public static Site GetSiteById(this IBlueYonderClient operations, int siteId)
            {
                return operations.GetSiteByIdAsync(siteId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Site
            /// </summary>
            /// <remarks>
            /// Gets the site with the specified ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Site> GetSiteByIdAsync(this IBlueYonderClient operations, int siteId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSiteByIdWithHttpMessagesAsync(siteId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Users
            /// </summary>
            /// <remarks>
            /// Retrieve a list of users using a list of the users internal IDs
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userIds'>
            /// </param>
            public static UserCollection GetUsers(this IBlueYonderClient operations, IList<string> userIds)
            {
                return operations.GetUsersAsync(userIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Users
            /// </summary>
            /// <remarks>
            /// Retrieve a list of users using a list of the users internal IDs
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userIds'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserCollection> GetUsersAsync(this IBlueYonderClient operations, IList<string> userIds, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersWithHttpMessagesAsync(userIds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Departments
            /// </summary>
            /// <remarks>
            /// Retrieve all departments for a site using the site’s internal ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteIdFilter'>
            /// The site's internal ID
            /// </param>
            public static DepartmentCollection ListDepartments(this IBlueYonderClient operations, int siteIdFilter)
            {
                return operations.ListDepartmentsAsync(siteIdFilter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Departments
            /// </summary>
            /// <remarks>
            /// Retrieve all departments for a site using the site’s internal ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteIdFilter'>
            /// The site's internal ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DepartmentCollection> ListDepartmentsAsync(this IBlueYonderClient operations, int siteIdFilter, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDepartmentsWithHttpMessagesAsync(siteIdFilter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Jobs
            /// </summary>
            /// <remarks>
            /// Retrieve all jobs for a site using the site’s internal ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteIdFilter'>
            /// The internal ID of the site.
            /// </param>
            public static JobCollection ListJobs(this IBlueYonderClient operations, int siteIdFilter)
            {
                return operations.ListJobsAsync(siteIdFilter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Jobs
            /// </summary>
            /// <remarks>
            /// Retrieve all jobs for a site using the site’s internal ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteIdFilter'>
            /// The internal ID of the site.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobCollection> ListJobsAsync(this IBlueYonderClient operations, int siteIdFilter, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListJobsWithHttpMessagesAsync(siteIdFilter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Site Employees
            /// </summary>
            /// <remarks>
            /// Gets the assigned employees for the site for the specified labor week.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// </param>
            /// <param name='businessDate'>
            /// The date in format yyyy-mm-dd being any date within the labor week
            /// </param>
            public static SiteEmployees GetSiteEmployees(this IBlueYonderClient operations, int siteId, System.DateTime? businessDate = default(System.DateTime?))
            {
                return operations.GetSiteEmployeesAsync(siteId, businessDate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Site Employees
            /// </summary>
            /// <remarks>
            /// Gets the assigned employees for the site for the specified labor week.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// </param>
            /// <param name='businessDate'>
            /// The date in format yyyy-mm-dd being any date within the labor week
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteEmployees> GetSiteEmployeesAsync(this IBlueYonderClient operations, int siteId, System.DateTime? businessDate = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSiteEmployeesWithHttpMessagesAsync(siteId, businessDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Time Off Type
            /// </summary>
            /// <remarks>
            /// Gets the detail for a time off type
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='timeOffTypeId'>
            /// </param>
            public static TimeOffType GetTimeOffType(this IBlueYonderClient operations, int timeOffTypeId)
            {
                return operations.GetTimeOffTypeAsync(timeOffTypeId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Time Off Type
            /// </summary>
            /// <remarks>
            /// Gets the detail for a time off type
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='timeOffTypeId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TimeOffType> GetTimeOffTypeAsync(this IBlueYonderClient operations, int timeOffTypeId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTimeOffTypeWithHttpMessagesAsync(timeOffTypeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Employee Availability
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='employeeId'>
            /// </param>
            public static EmployeeAvailabilityCollectionResource GetEmployeeAvailability(this IBlueYonderClient operations, int employeeId)
            {
                return operations.GetEmployeeAvailabilityAsync(employeeId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Employee Availability
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='employeeId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmployeeAvailabilityCollectionResource> GetEmployeeAvailabilityAsync(this IBlueYonderClient operations, int employeeId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEmployeeAvailabilityWithHttpMessagesAsync(employeeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Employee Availability
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='employeeId'>
            /// </param>
            public static object CreateEmployeeAvailability(this IBlueYonderClient operations, EmployeeAvailabilityResource body, int? employeeId = default(int?))
            {
                return operations.CreateEmployeeAvailabilityAsync(body, employeeId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Employee Availability
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='employeeId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateEmployeeAvailabilityAsync(this IBlueYonderClient operations, EmployeeAvailabilityResource body, int? employeeId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateEmployeeAvailabilityWithHttpMessagesAsync(body, employeeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Unfilled Shifts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// </param>
            /// <param name='calendarDateInLaborWeek'>
            /// </param>
            public static OpenShiftCollection GetUnfilledShifts(this IBlueYonderClient operations, int siteId, string calendarDateInLaborWeek)
            {
                return operations.GetUnfilledShiftsAsync(siteId, calendarDateInLaborWeek).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Unfilled Shifts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// </param>
            /// <param name='calendarDateInLaborWeek'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OpenShiftCollection> GetUnfilledShiftsAsync(this IBlueYonderClient operations, int siteId, string calendarDateInLaborWeek, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUnfilledShiftsWithHttpMessagesAsync(siteId, calendarDateInLaborWeek, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Shift Swap Request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object CreateShiftSwapRequest(this IBlueYonderClient operations, ShiftSwapRequest body)
            {
                return operations.CreateShiftSwapRequestAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Shift Swap Request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateShiftSwapRequestAsync(this IBlueYonderClient operations, ShiftSwapRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateShiftSwapRequestWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Recipient approves shift swap.
            /// </summary>
            /// <remarks>
            /// Allows the recipient of the given swap request to approve, setting the
            /// request status to 'Awaiting Manager Approval'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='swapRequestId'>
            /// </param>
            public static object RecipientApproveShiftSwap(this IBlueYonderClient operations, SwapShiftRequestResource body, string swapRequestId)
            {
                return operations.RecipientApproveShiftSwapAsync(body, swapRequestId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Recipient approves shift swap.
            /// </summary>
            /// <remarks>
            /// Allows the recipient of the given swap request to approve, setting the
            /// request status to 'Awaiting Manager Approval'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='swapRequestId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RecipientApproveShiftSwapAsync(this IBlueYonderClient operations, SwapShiftRequestResource body, string swapRequestId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RecipientApproveShiftSwapWithHttpMessagesAsync(body, swapRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancel shift swap.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='swapRequestId'>
            /// </param>
            public static object CancelShiftSwap(this IBlueYonderClient operations, string swapRequestId)
            {
                return operations.CancelShiftSwapAsync(swapRequestId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel shift swap.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='swapRequestId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CancelShiftSwapAsync(this IBlueYonderClient operations, string swapRequestId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelShiftSwapWithHttpMessagesAsync(swapRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Request Open Shift
            /// </summary>
            /// <remarks>
            /// Allow the requester to claim open shift.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shiftId'>
            /// </param>
            public static object RequestOpenShift(this IBlueYonderClient operations, string shiftId)
            {
                return operations.RequestOpenShiftAsync(shiftId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Request Open Shift
            /// </summary>
            /// <remarks>
            /// Allow the requester to claim open shift.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shiftId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RequestOpenShiftAsync(this IBlueYonderClient operations, string shiftId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RequestOpenShiftWithHttpMessagesAsync(shiftId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Assign an open shift to an employee
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='scheduledShiftId'>
            /// </param>
            public static object AssignOpenShift(this IBlueYonderClient operations, AssignOpenShiftRequest body, int scheduledShiftId)
            {
                return operations.AssignOpenShiftAsync(body, scheduledShiftId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Assign an open shift to an employee
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='scheduledShiftId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AssignOpenShiftAsync(this IBlueYonderClient operations, AssignOpenShiftRequest body, int scheduledShiftId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AssignOpenShiftWithHttpMessagesAsync(body, scheduledShiftId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get My Available Shifts For Week
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='calendarDate'>
            /// </param>
            public static MyAvailableShiftsCollectionResource GetMyAvailableShiftsForWeek(this IBlueYonderClient operations, string calendarDate)
            {
                return operations.GetMyAvailableShiftsForWeekAsync(calendarDate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get My Available Shifts For Week
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='calendarDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MyAvailableShiftsCollectionResource> GetMyAvailableShiftsForWeekAsync(this IBlueYonderClient operations, string calendarDate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMyAvailableShiftsForWeekWithHttpMessagesAsync(calendarDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Provides eligible Shifts which can be swappable for the given scheduled
            /// shift Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shiftId'>
            /// </param>
            public static SwappableShiftCollectionResponse GetAvailableSwapShifts(this IBlueYonderClient operations, string shiftId)
            {
                return operations.GetAvailableSwapShiftsAsync(shiftId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Provides eligible Shifts which can be swappable for the given scheduled
            /// shift Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shiftId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SwappableShiftCollectionResponse> GetAvailableSwapShiftsAsync(this IBlueYonderClient operations, string shiftId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAvailableSwapShiftsWithHttpMessagesAsync(shiftId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the sites pending approvals.
            /// </summary>
            /// <remarks>
            /// List all of the various types of pending approvals for the given site from
            /// the current date.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// </param>
            public static PendingApprovals GetSiteApprovals(this IBlueYonderClient operations, string siteId)
            {
                return operations.GetSiteApprovalsAsync(siteId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the sites pending approvals.
            /// </summary>
            /// <remarks>
            /// List all of the various types of pending approvals for the given site from
            /// the current date.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PendingApprovals> GetSiteApprovalsAsync(this IBlueYonderClient operations, string siteId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSiteApprovalsWithHttpMessagesAsync(siteId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Approve the given shift swap.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// </param>
            /// <param name='swapShiftId'>
            /// </param>
            /// <param name='swappeeScheduledShiftId'>
            /// </param>
            public static object ApproveShiftSwap(this IBlueYonderClient operations, string siteId, string swapShiftId, string swappeeScheduledShiftId)
            {
                return operations.ApproveShiftSwapAsync(siteId, swapShiftId, swappeeScheduledShiftId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Approve the given shift swap.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// </param>
            /// <param name='swapShiftId'>
            /// </param>
            /// <param name='swappeeScheduledShiftId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApproveShiftSwapAsync(this IBlueYonderClient operations, string siteId, string swapShiftId, string swappeeScheduledShiftId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApproveShiftSwapWithHttpMessagesAsync(siteId, swapShiftId, swappeeScheduledShiftId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deny the shift swap request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// </param>
            /// <param name='swapShiftId'>
            /// </param>
            /// <param name='swappeeScheduledShiftId'>
            /// </param>
            public static object DenyShiftSwap(this IBlueYonderClient operations, string siteId, string swapShiftId, string swappeeScheduledShiftId)
            {
                return operations.DenyShiftSwapAsync(siteId, swapShiftId, swappeeScheduledShiftId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deny the shift swap request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// </param>
            /// <param name='swapShiftId'>
            /// </param>
            /// <param name='swappeeScheduledShiftId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DenyShiftSwapAsync(this IBlueYonderClient operations, string siteId, string swapShiftId, string swappeeScheduledShiftId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DenyShiftSwapWithHttpMessagesAsync(siteId, swapShiftId, swappeeScheduledShiftId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get My Info
            /// </summary>
            /// <remarks>
            /// Gets the info for the logged in employee
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static EmployeeInfo GetMyInfo(this IBlueYonderClient operations)
            {
                return operations.GetMyInfoAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get My Info
            /// </summary>
            /// <remarks>
            /// Gets the info for the logged in employee
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmployeeInfo> GetMyInfoAsync(this IBlueYonderClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMyInfoWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Site Info
            /// </summary>
            /// <remarks>
            /// Gets the site information
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// </param>
            public static object GetSiteInfo(this IBlueYonderClient operations, string siteId)
            {
                return operations.GetSiteInfoAsync(siteId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Site Info
            /// </summary>
            /// <remarks>
            /// Gets the site information
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSiteInfoAsync(this IBlueYonderClient operations, string siteId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSiteInfoWithHttpMessagesAsync(siteId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// WeekShifts
            /// </summary>
            /// <remarks>
            /// Gets the full set of shifts for the specified site and week. If no
            /// businessDate is specified then the method returns the data for the current
            /// week.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// The ID of the site to get the scheduled shifts for.
            /// </param>
            /// <param name='businessDate'>
            /// </param>
            public static WeekShifts GetSiteShiftsForWeek(this IBlueYonderClient operations, int siteId, string businessDate)
            {
                return operations.GetSiteShiftsForWeekAsync(siteId, businessDate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// WeekShifts
            /// </summary>
            /// <remarks>
            /// Gets the full set of shifts for the specified site and week. If no
            /// businessDate is specified then the method returns the data for the current
            /// week.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// The ID of the site to get the scheduled shifts for.
            /// </param>
            /// <param name='businessDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WeekShifts> GetSiteShiftsForWeekAsync(this IBlueYonderClient operations, int siteId, string businessDate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSiteShiftsForWeekWithHttpMessagesAsync(siteId, businessDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Employee shifts for week
            /// </summary>
            /// <remarks>
            /// Gets the full set of shifts for the specified employee and week. If no
            /// businessDate is specified then the method returns the data for the current
            /// week.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='employeeId'>
            /// </param>
            /// <param name='businessDate'>
            /// </param>
            public static WeekShifts GetEmployeeShiftsForWeek(this IBlueYonderClient operations, int employeeId, string businessDate)
            {
                return operations.GetEmployeeShiftsForWeekAsync(employeeId, businessDate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Employee shifts for week
            /// </summary>
            /// <remarks>
            /// Gets the full set of shifts for the specified employee and week. If no
            /// businessDate is specified then the method returns the data for the current
            /// week.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='employeeId'>
            /// </param>
            /// <param name='businessDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WeekShifts> GetEmployeeShiftsForWeekAsync(this IBlueYonderClient operations, int employeeId, string businessDate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEmployeeShiftsForWeekWithHttpMessagesAsync(employeeId, businessDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get All Sites
            /// </summary>
            /// <remarks>
            /// Gets the list of all sites.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static SiteCollectionResource ListSites(this IBlueYonderClient operations)
            {
                return operations.ListSitesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get All Sites
            /// </summary>
            /// <remarks>
            /// Gets the list of all sites.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteCollectionResource> ListSitesAsync(this IBlueYonderClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSitesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get All Time Zones
            /// </summary>
            /// <remarks>
            /// Get all the configured time zones
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static TimeZoneCollectionResource ListTimeZones(this IBlueYonderClient operations)
            {
                return operations.ListTimeZonesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get All Time Zones
            /// </summary>
            /// <remarks>
            /// Get all the configured time zones
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TimeZoneCollectionResource> ListTimeZonesAsync(this IBlueYonderClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTimeZonesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Time Off Requests For Week
            /// </summary>
            /// <remarks>
            /// Gets all the time off requests for the employees in the site for a labour
            /// week.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// </param>
            /// <param name='dateinLaborWeek'>
            /// </param>
            public static EmployeeTimeOffCollectionResource GetTimeOffRequestsForWeek(this IBlueYonderClient operations, string siteId, string dateinLaborWeek)
            {
                return operations.GetTimeOffRequestsForWeekAsync(siteId, dateinLaborWeek).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Time Off Requests For Week
            /// </summary>
            /// <remarks>
            /// Gets all the time off requests for the employees in the site for a labour
            /// week.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// </param>
            /// <param name='dateinLaborWeek'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmployeeTimeOffCollectionResource> GetTimeOffRequestsForWeekAsync(this IBlueYonderClient operations, string siteId, string dateinLaborWeek, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTimeOffRequestsForWeekWithHttpMessagesAsync(siteId, dateinLaborWeek, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get My Shift Swap Requests
            /// </summary>
            /// <remarks>
            /// Gets all of the swap requests for this employee.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static SwapShiftRequestCollectionResource GetMyShiftSwapRequests(this IBlueYonderClient operations)
            {
                return operations.GetMyShiftSwapRequestsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get My Shift Swap Requests
            /// </summary>
            /// <remarks>
            /// Gets all of the swap requests for this employee.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SwapShiftRequestCollectionResource> GetMyShiftSwapRequestsAsync(this IBlueYonderClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMyShiftSwapRequestsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get swap shift summary
            /// </summary>
            /// <remarks>
            /// Get swap shift summary by internal id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// </param>
            /// <param name='swapShiftId'>
            /// </param>
            /// <param name='swappeeScheduledShiftId'>
            /// </param>
            public static SwapShiftSummaryResource GetSwapShiftSummary(this IBlueYonderClient operations, string siteId, string swapShiftId, string swappeeScheduledShiftId)
            {
                return operations.GetSwapShiftSummaryAsync(siteId, swapShiftId, swappeeScheduledShiftId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get swap shift summary
            /// </summary>
            /// <remarks>
            /// Get swap shift summary by internal id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// </param>
            /// <param name='swapShiftId'>
            /// </param>
            /// <param name='swappeeScheduledShiftId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SwapShiftSummaryResource> GetSwapShiftSummaryAsync(this IBlueYonderClient operations, string siteId, string swapShiftId, string swappeeScheduledShiftId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSwapShiftSummaryWithHttpMessagesAsync(siteId, swapShiftId, swappeeScheduledShiftId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all shift offers for that user for a given date.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='calendarDate'>
            /// </param>
            public static ShiftOffersCollectionResource GetShiftOffers(this IBlueYonderClient operations, string calendarDate)
            {
                return operations.GetShiftOffersAsync(calendarDate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all shift offers for that user for a given date.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='calendarDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ShiftOffersCollectionResource> GetShiftOffersAsync(this IBlueYonderClient operations, string calendarDate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetShiftOffersWithHttpMessagesAsync(calendarDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Site Employees
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// </param>
            /// <param name='containingBusinessDate'>
            /// </param>
            public static SchedulingEmployeeCollectionResource ListSiteEmployees(this IBlueYonderClient operations, string siteId, string containingBusinessDate)
            {
                return operations.ListSiteEmployeesAsync(siteId, containingBusinessDate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Site Employees
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// </param>
            /// <param name='containingBusinessDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SchedulingEmployeeCollectionResource> ListSiteEmployeesAsync(this IBlueYonderClient operations, string siteId, string containingBusinessDate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteEmployeesWithHttpMessagesAsync(siteId, containingBusinessDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Time Off Request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='ignoreWarnings'>
            /// Comma separated list of warnings that should be ignored from the list
            /// RequestLongerThanClientSetting, BlackoutPeriodOverlap and
            /// AccrualBalanceViolation or * to ignore all three warnings.
            /// </param>
            public static object CreateTimeOffRequest(this IBlueYonderClient operations, TimeOffRequestResource body, string ignoreWarnings = default(string))
            {
                return operations.CreateTimeOffRequestAsync(body, ignoreWarnings).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Time Off Request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='ignoreWarnings'>
            /// Comma separated list of warnings that should be ignored from the list
            /// RequestLongerThanClientSetting, BlackoutPeriodOverlap and
            /// AccrualBalanceViolation or * to ignore all three warnings.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateTimeOffRequestAsync(this IBlueYonderClient operations, TimeOffRequestResource body, string ignoreWarnings = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTimeOffRequestWithHttpMessagesAsync(body, ignoreWarnings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Time Off Type By Name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            public static object GetTimeOffTypeByName(this IBlueYonderClient operations, string name)
            {
                return operations.GetTimeOffTypeByNameAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Time Off Type By Name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTimeOffTypeByNameAsync(this IBlueYonderClient operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTimeOffTypeByNameWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Adjustment Categories
            /// </summary>
            /// <remarks>
            /// Gets the full list of adjustment categories that have been defined in Blue
            /// Yonder including time off reasons.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static AdjustmentCategoryCollectionResource ListAdjustmentCategories(this IBlueYonderClient operations)
            {
                return operations.ListAdjustmentCategoriesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Adjustment Categories
            /// </summary>
            /// <remarks>
            /// Gets the full list of adjustment categories that have been defined in Blue
            /// Yonder including time off reasons.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AdjustmentCategoryCollectionResource> ListAdjustmentCategoriesAsync(this IBlueYonderClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAdjustmentCategoriesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Time Off Request
            /// </summary>
            /// <remarks>
            /// Gets the time off request with the specified Id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='timeOffRequestId'>
            /// </param>
            public static object GetTimeOffRequest(this IBlueYonderClient operations, int timeOffRequestId)
            {
                return operations.GetTimeOffRequestAsync(timeOffRequestId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Time Off Request
            /// </summary>
            /// <remarks>
            /// Gets the time off request with the specified Id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='timeOffRequestId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTimeOffRequestAsync(this IBlueYonderClient operations, int timeOffRequestId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTimeOffRequestWithHttpMessagesAsync(timeOffRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update Time Off Request
            /// </summary>
            /// <remarks>
            /// Updates the specified time off request.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='timeOffRequestId'>
            /// </param>
            /// <param name='ignoreWarnings'>
            /// Can specify which individual warnings out of
            /// (RequestLongerThanClientSetting, BlackoutPeriodOverlap and
            /// AccrualBalanceViolation) should be ignored (comma-separated list) or use
            /// all to specify all 3 warnings should be ignored.
            /// </param>
            public static object UpdateTimeOffRequest(this IBlueYonderClient operations, TimeOffRequestResource body, int timeOffRequestId, string ignoreWarnings = default(string))
            {
                return operations.UpdateTimeOffRequestAsync(body, timeOffRequestId, ignoreWarnings).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Time Off Request
            /// </summary>
            /// <remarks>
            /// Updates the specified time off request.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='timeOffRequestId'>
            /// </param>
            /// <param name='ignoreWarnings'>
            /// Can specify which individual warnings out of
            /// (RequestLongerThanClientSetting, BlackoutPeriodOverlap and
            /// AccrualBalanceViolation) should be ignored (comma-separated list) or use
            /// all to specify all 3 warnings should be ignored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateTimeOffRequestAsync(this IBlueYonderClient operations, TimeOffRequestResource body, int timeOffRequestId, string ignoreWarnings = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTimeOffRequestWithHttpMessagesAsync(body, timeOffRequestId, ignoreWarnings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Employee shifts for that business date.
            /// </summary>
            /// <remarks>
            /// Gets all of the employees shifts for the specified business date.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='employeeId'>
            /// </param>
            /// <param name='businessDate'>
            /// </param>
            public static EmployeeScheduledShiftCollectionResource GetEmployeeShiftsForBusinessDate(this IBlueYonderClient operations, int employeeId, string businessDate)
            {
                return operations.GetEmployeeShiftsForBusinessDateAsync(employeeId, businessDate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Employee shifts for that business date.
            /// </summary>
            /// <remarks>
            /// Gets all of the employees shifts for the specified business date.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='employeeId'>
            /// </param>
            /// <param name='businessDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmployeeScheduledShiftCollectionResource> GetEmployeeShiftsForBusinessDateAsync(this IBlueYonderClient operations, int employeeId, string businessDate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEmployeeShiftsForBusinessDateWithHttpMessagesAsync(employeeId, businessDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Scheduled Shift
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduledShiftId'>
            /// </param>
            public static ScheduledShift GetScheduledShift(this IBlueYonderClient operations, int scheduledShiftId)
            {
                return operations.GetScheduledShiftAsync(scheduledShiftId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Scheduled Shift
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduledShiftId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ScheduledShift> GetScheduledShiftAsync(this IBlueYonderClient operations, int scheduledShiftId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetScheduledShiftWithHttpMessagesAsync(scheduledShiftId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves pay period configurations for that effective from date and site.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteIdFilter'>
            /// </param>
            /// <param name='effectiveDate'>
            /// </param>
            public static object GetPayPeriodConfigurations(this IBlueYonderClient operations, string siteIdFilter, string effectiveDate)
            {
                return operations.GetPayPeriodConfigurationsAsync(siteIdFilter, effectiveDate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves pay period configurations for that effective from date and site.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteIdFilter'>
            /// </param>
            /// <param name='effectiveDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetPayPeriodConfigurationsAsync(this IBlueYonderClient operations, string siteIdFilter, string effectiveDate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPayPeriodConfigurationsWithHttpMessagesAsync(siteIdFilter, effectiveDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Employee Time Off By Year
            /// </summary>
            /// <remarks>
            /// Get List of Time Off Requests for the given employee's internal Id in a
            /// specific year.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='employeeId'>
            /// The employee’s internal Id
            /// </param>
            /// <param name='year'>
            /// Calender year
            /// </param>
            public static TimeOffRequestCollectionResource GetEmployeeTimeOffByYear(this IBlueYonderClient operations, int employeeId, int year)
            {
                return operations.GetEmployeeTimeOffByYearAsync(employeeId, year).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Employee Time Off By Year
            /// </summary>
            /// <remarks>
            /// Get List of Time Off Requests for the given employee's internal Id in a
            /// specific year.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='employeeId'>
            /// The employee’s internal Id
            /// </param>
            /// <param name='year'>
            /// Calender year
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TimeOffRequestCollectionResource> GetEmployeeTimeOffByYearAsync(this IBlueYonderClient operations, int employeeId, int year, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEmployeeTimeOffByYearWithHttpMessagesAsync(employeeId, year, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Time Off Request By Id
            /// </summary>
            /// <remarks>
            /// Gets the Time Off Request for the given timeOffRequestId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// </param>
            /// <param name='timeOffRequestId'>
            /// </param>
            public static EmployeeTimeOffResource GetTimeOffRequestById(this IBlueYonderClient operations, string siteId, string timeOffRequestId)
            {
                return operations.GetTimeOffRequestByIdAsync(siteId, timeOffRequestId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Time Off Request By Id
            /// </summary>
            /// <remarks>
            /// Gets the Time Off Request for the given timeOffRequestId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// </param>
            /// <param name='timeOffRequestId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmployeeTimeOffResource> GetTimeOffRequestByIdAsync(this IBlueYonderClient operations, string siteId, string timeOffRequestId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTimeOffRequestByIdWithHttpMessagesAsync(siteId, timeOffRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Time Zone By Id
            /// </summary>
            /// <remarks>
            /// Get the timeZone with a specified ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='timeZoneId'>
            /// </param>
            public static SiteTimeZone GetTimeZoneById(this IBlueYonderClient operations, int timeZoneId)
            {
                return operations.GetTimeZoneByIdAsync(timeZoneId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Time Zone By Id
            /// </summary>
            /// <remarks>
            /// Get the timeZone with a specified ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='timeZoneId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteTimeZone> GetTimeZoneByIdAsync(this IBlueYonderClient operations, int timeZoneId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTimeZoneByIdWithHttpMessagesAsync(timeZoneId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// RootTypeforDepartment
    /// </summary>
    /// <remarks>
    /// Defines a department
    /// </remarks>
    public partial class Department
    {
        /// <summary>
        /// Initializes a new instance of the Department class.
        /// </summary>
        public Department()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Department class.
        /// </summary>
        public Department(int id = default(int), string name = default(string))
        {
            Id = id;
            Name = name;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// RootTypeforJob
    /// </summary>
    /// <remarks>
    /// Defines a job
    /// </remarks>
    public partial class Job
    {
        /// <summary>
        /// Initializes a new instance of the Job class.
        /// </summary>
        public Job()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Job class.
        /// </summary>
        public Job(string name = default(string), string displayCode = default(string), string jobCode = default(string), int? departmentID = default(int?), int jobId = default(int))
        {
            Name = name;
            DisplayCode = displayCode;
            JobCode = jobCode;
            DepartmentID = departmentID;
            JobId = jobId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "displayCode")]
        public string DisplayCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "jobCode")]
        public string JobCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "departmentID")]
        public int? DepartmentID { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "jobId")]
        public int JobId { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// RootTypeforScheduledDetail
    /// </summary>
    /// <remarks>
    /// Defines the detail of a schedule
    /// </remarks>
    public partial class ScheduledDetail
    {
        /// <summary>
        /// Initializes a new instance of the ScheduledDetail class.
        /// </summary>
        public ScheduledDetail()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScheduledDetail class.
        /// </summary>
        public ScheduledDetail(string detailTypeCode = default(string), System.DateTime startTime = default(System.DateTime), System.DateTime endTime = default(System.DateTime))
        {
            DetailTypeCode = detailTypeCode;
            StartTime = startTime;
            EndTime = endTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "detailTypeCode")]
        public string DetailTypeCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startTime")]
        public System.DateTime StartTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "endTime")]
        public System.DateTime EndTime { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// RootTypeforScheduledJob
    /// </summary>
    /// <remarks>
    /// Defines a scheduled job
    /// </remarks>
    public partial class ScheduledJob
    {
        /// <summary>
        /// Initializes a new instance of the ScheduledJob class.
        /// </summary>
        public ScheduledJob()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScheduledJob class.
        /// </summary>
        public ScheduledJob(System.DateTime startTime = default(System.DateTime), System.DateTime endTime = default(System.DateTime), int jobId = default(int), IList<ScheduledDetail> scheduledDetail = default(IList<ScheduledDetail>))
        {
            StartTime = startTime;
            EndTime = endTime;
            JobId = jobId;
            ScheduledDetail = scheduledDetail;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startTime")]
        public System.DateTime StartTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "endTime")]
        public System.DateTime EndTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "jobId")]
        public int JobId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "scheduledDetail")]
        public IList<ScheduledDetail> ScheduledDetail { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// RootTypeforScheduledShift
    /// </summary>
    /// <remarks>
    /// Defines a scheduled shift.
    /// </remarks>
    public partial class ScheduledShift
    {
        /// <summary>
        /// Initializes a new instance of the ScheduledShift class.
        /// </summary>
        public ScheduledShift()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScheduledShift class.
        /// </summary>
        public ScheduledShift(int scheduledShiftId = default(int), int employeeId = default(int), System.DateTime startTime = default(System.DateTime), System.DateTime endTime = default(System.DateTime), int siteId = default(int), IList<ScheduledJob> scheduledJobs = default(IList<ScheduledJob>))
        {
            ScheduledShiftId = scheduledShiftId;
            EmployeeId = employeeId;
            StartTime = startTime;
            EndTime = endTime;
            SiteId = siteId;
            ScheduledJobs = scheduledJobs;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "scheduledShiftId")]
        public int ScheduledShiftId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "employeeId")]
        public int EmployeeId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startTime")]
        public System.DateTime StartTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "endTime")]
        public System.DateTime EndTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "siteId")]
        public int SiteId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "scheduledJobs")]
        public IList<ScheduledJob> ScheduledJobs { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// RootTypeforWeekShifts
    /// </summary>
    /// <remarks>
    /// Defines the collection of scheduled shifts for a week
    /// </remarks>
    public partial class WeekShifts
    {
        /// <summary>
        /// Initializes a new instance of the WeekShifts class.
        /// </summary>
        public WeekShifts()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WeekShifts class.
        /// </summary>
        public WeekShifts(int siteId = default(int), System.DateTime startOfLaborWeek = default(System.DateTime), IList<ScheduledShift> entities = default(IList<ScheduledShift>))
        {
            SiteId = siteId;
            StartOfLaborWeek = startOfLaborWeek;
            Entities = entities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "siteId")]
        public int SiteId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startOfLaborWeek")]
        public System.DateTime StartOfLaborWeek { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entities")]
        public IList<ScheduledShift> Entities { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Name
    /// </summary>
    /// <remarks>
    /// Defines a Name
    /// </remarks>
    public partial class NameResource
    {
        /// <summary>
        /// Initializes a new instance of the NameResource class.
        /// </summary>
        public NameResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NameResource class.
        /// </summary>
        public NameResource(string loginName = default(string), string firstName = default(string), string lastName = default(string))
        {
            LoginName = loginName;
            FirstName = firstName;
            LastName = lastName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "loginName")]
        public string LoginName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastName")]
        public string LastName { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for UserSecurityGroupAssignment
    /// </summary>
    public partial class UserSecurityGroupAssignment
    {
        /// <summary>
        /// Initializes a new instance of the UserSecurityGroupAssignment
        /// class.
        /// </summary>
        public UserSecurityGroupAssignment()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserSecurityGroupAssignment
        /// class.
        /// </summary>
        public UserSecurityGroupAssignment(string name, int securityGroupId, int userId)
        {
            Name = name;
            SecurityGroupId = securityGroupId;
            UserId = userId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "securityGroupId")]
        public int SecurityGroupId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userId")]
        public int UserId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for UserSecurityGroupCollection
    /// </summary>
    public partial class UserSecurityGroupCollection
    {
        /// <summary>
        /// Initializes a new instance of the UserSecurityGroupCollection
        /// class.
        /// </summary>
        public UserSecurityGroupCollection()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserSecurityGroupCollection
        /// class.
        /// </summary>
        public UserSecurityGroupCollection(int userId, IList<UserSecurityGroupAssignment> entities)
        {
            UserId = userId;
            Entities = entities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userId")]
        public int UserId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entities")]
        public IList<UserSecurityGroupAssignment> Entities { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Entities == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Entities");
            }
            if (Entities != null)
            {
                foreach (var element in Entities)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for ContactInfoResource
    /// </summary>
    public partial class ContactInfoResource
    {
        /// <summary>
        /// Initializes a new instance of the ContactInfoResource class.
        /// </summary>
        public ContactInfoResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ContactInfoResource class.
        /// </summary>
        public ContactInfoResource(int? contactInformationId = default(int?), string email = default(string))
        {
            ContactInformationId = contactInformationId;
            Email = email;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "contactInformationId")]
        public int? ContactInformationId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// RootTypeforUser
    /// </summary>
    /// <remarks>
    /// Defines a user
    /// </remarks>
    public partial class User
    {
        /// <summary>
        /// Initializes a new instance of the User class.
        /// </summary>
        public User()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the User class.
        /// </summary>
        public User(NameResource name, UserSecurityGroupCollection userSecurityGroupAssignmentCollection, int userId, ContactInfoResource contactInfo)
        {
            Name = name;
            UserSecurityGroupAssignmentCollection = userSecurityGroupAssignmentCollection;
            UserId = userId;
            ContactInfo = contactInfo;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public NameResource Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userSecurityGroupAssignmentCollection")]
        public UserSecurityGroupCollection UserSecurityGroupAssignmentCollection { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userId")]
        public int UserId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "contactInfo")]
        public ContactInfoResource ContactInfo { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (UserSecurityGroupAssignmentCollection == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UserSecurityGroupAssignmentCollection");
            }
            if (ContactInfo == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ContactInfo");
            }
            if (UserSecurityGroupAssignmentCollection != null)
            {
                UserSecurityGroupAssignmentCollection.Validate();
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for Site
    /// </summary>
    /// <remarks>
    /// Defines a site
    /// </remarks>
    public partial class Site
    {
        /// <summary>
        /// Initializes a new instance of the Site class.
        /// </summary>
        public Site()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Site class.
        /// </summary>
        public Site(int id = default(int), string name = default(string), string longName = default(string), string status = default(string), System.DateTime? openedDate = default(System.DateTime?), int? timeZoneAssignmentID = default(int?))
        {
            Id = id;
            Name = name;
            LongName = longName;
            Status = status;
            OpenedDate = openedDate;
            TimeZoneAssignmentID = timeZoneAssignmentID;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "longName")]
        public string LongName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "openedDate")]
        public System.DateTime? OpenedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timeZoneAssignmentID")]
        public int? TimeZoneAssignmentID { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for SiteEmployee
    /// </summary>
    /// <remarks>
    /// The root of the SiteEmployee type's schema.
    /// </remarks>
    public partial class SiteEmployee
    {
        /// <summary>
        /// Initializes a new instance of the SiteEmployee class.
        /// </summary>
        public SiteEmployee()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SiteEmployee class.
        /// </summary>
        public SiteEmployee(int employeeId, string firstName = default(string), string lastName = default(string), string displayName = default(string), bool? canWorkUnassignedJobs = default(bool?), bool? isManager = default(bool?))
        {
            EmployeeId = employeeId;
            FirstName = firstName;
            LastName = lastName;
            DisplayName = displayName;
            CanWorkUnassignedJobs = canWorkUnassignedJobs;
            IsManager = isManager;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "employeeId")]
        public int EmployeeId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "canWorkUnassignedJobs")]
        public bool? CanWorkUnassignedJobs { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isManager")]
        public bool? IsManager { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for SiteEmployees
    /// </summary>
    /// <remarks>
    /// The root of the SiteEmployees type's schema.
    /// </remarks>
    public partial class SiteEmployees
    {
        /// <summary>
        /// Initializes a new instance of the SiteEmployees class.
        /// </summary>
        public SiteEmployees()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SiteEmployees class.
        /// </summary>
        public SiteEmployees(int siteId, System.DateTime startOfLaborWeek, IList<SiteEmployee> entities)
        {
            SiteId = siteId;
            StartOfLaborWeek = startOfLaborWeek;
            Entities = entities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "siteId")]
        public int SiteId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startOfLaborWeek")]
        public System.DateTime StartOfLaborWeek { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entities")]
        public IList<SiteEmployee> Entities { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Entities == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Entities");
            }
            if (Entities != null)
            {
                foreach (var element in Entities)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for TimeOffType
    /// </summary>
    public partial class TimeOffType
    {
        /// <summary>
        /// Initializes a new instance of the TimeOffType class.
        /// </summary>
        public TimeOffType()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TimeOffType class.
        /// </summary>
        public TimeOffType(int id, string name)
        {
            Id = id;
            Name = name;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for GeneralAvailability
    /// </summary>
    public partial class GeneralAvailability
    {
        /// <summary>
        /// Initializes a new instance of the GeneralAvailability class.
        /// </summary>
        public GeneralAvailability()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GeneralAvailability class.
        /// </summary>
        public GeneralAvailability(string startTimeOffset, string endTimeOffset, string dayOfWeek, int weekNumber, int? id = default(int?))
        {
            Id = id;
            StartTimeOffset = startTimeOffset;
            EndTimeOffset = endTimeOffset;
            DayOfWeek = dayOfWeek;
            WeekNumber = weekNumber;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startTimeOffset")]
        public string StartTimeOffset { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "endTimeOffset")]
        public string EndTimeOffset { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dayOfWeek")]
        public string DayOfWeek { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "weekNumber")]
        public int WeekNumber { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (StartTimeOffset == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StartTimeOffset");
            }
            if (EndTimeOffset == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EndTimeOffset");
            }
            if (DayOfWeek == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DayOfWeek");
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for UnfilledShift
    /// </summary>
    public partial class OpenShift
    {
        /// <summary>
        /// Initializes a new instance of the OpenShift class.
        /// </summary>
        public OpenShift()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OpenShift class.
        /// </summary>
        public OpenShift(string employeeId, System.DateTime startTime, System.DateTime endTime, int? scheduledShiftId = default(int?), int? siteId = default(int?), int? quantity = default(int?), string scheduleTypeCode = default(string), IList<ScheduledJob> scheduledJobs = default(IList<ScheduledJob>))
        {
            ScheduledShiftId = scheduledShiftId;
            EmployeeId = employeeId;
            StartTime = startTime;
            EndTime = endTime;
            SiteId = siteId;
            Quantity = quantity;
            ScheduleTypeCode = scheduleTypeCode;
            ScheduledJobs = scheduledJobs;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "scheduledShiftId")]
        public int? ScheduledShiftId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "employeeId")]
        public string EmployeeId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startTime")]
        public System.DateTime StartTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "endTime")]
        public System.DateTime EndTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "siteId")]
        public int? SiteId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "quantity")]
        public int? Quantity { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "scheduleTypeCode")]
        public string ScheduleTypeCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "scheduledJobs")]
        public IList<ScheduledJob> ScheduledJobs { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (EmployeeId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EmployeeId");
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for UnfilledShiftCollection
    /// </summary>
    public partial class OpenShiftCollection
    {
        /// <summary>
        /// Initializes a new instance of the OpenShiftCollection class.
        /// </summary>
        public OpenShiftCollection()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OpenShiftCollection class.
        /// </summary>
        public OpenShiftCollection(int? siteId = default(int?), System.DateTime? startOfLaborWeek = default(System.DateTime?), IList<OpenShift> entities = default(IList<OpenShift>))
        {
            SiteId = siteId;
            StartOfLaborWeek = startOfLaborWeek;
            Entities = entities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "siteId")]
        public int? SiteId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startOfLaborWeek")]
        public System.DateTime? StartOfLaborWeek { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entities")]
        public IList<OpenShift> Entities { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for SiteTimeZone
    /// </summary>
    /// <remarks>
    /// This data type is currently a complex object.
    /// </remarks>
    public partial class SiteTimeZone
    {
        /// <summary>
        /// Initializes a new instance of the SiteTimeZone class.
        /// </summary>
        public SiteTimeZone()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SiteTimeZone class.
        /// </summary>
        public SiteTimeZone(int id, string name = default(string))
        {
            Id = id;
            Name = name;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for ShiftSwapRequest
    /// </summary>
    public partial class ShiftSwapRequest
    {
        /// <summary>
        /// Initializes a new instance of the ShiftSwapRequest class.
        /// </summary>
        public ShiftSwapRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ShiftSwapRequest class.
        /// </summary>
        public ShiftSwapRequest(int swapperScheduledShiftId, IList<int?> requestedScheduledShiftIds)
        {
            SwapperScheduledShiftId = swapperScheduledShiftId;
            RequestedScheduledShiftIds = requestedScheduledShiftIds;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "swapperScheduledShiftId")]
        public int SwapperScheduledShiftId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "requestedScheduledShiftIds")]
        public IList<int?> RequestedScheduledShiftIds { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RequestedScheduledShiftIds == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RequestedScheduledShiftIds");
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for SwapShiftResource
    /// </summary>
    public partial class SwapShiftResource
    {
        /// <summary>
        /// Initializes a new instance of the SwapShiftResource class.
        /// </summary>
        public SwapShiftResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SwapShiftResource class.
        /// </summary>
        /// <param name="type">Shift type status taking one of the values:
        /// Losing, Gaining or Normal</param>
        /// <param name="shiftId">Internal shift ID</param>
        /// <param name="shiftStart">Shift start time</param>
        /// <param name="shiftEnd">Shift end time</param>
        /// <param name="jobNames">Job Names separated by / if the shift is job
        /// transfers</param>
        /// <param name="jobColor">Job Color code</param>
        /// <param name="fixedShift">Is Fixed shift</param>
        public SwapShiftResource(string type = default(string), string shiftId = default(string), System.DateTime? shiftStart = default(System.DateTime?), System.DateTime? shiftEnd = default(System.DateTime?), string jobNames = default(string), string jobColor = default(string), bool? fixedShift = default(bool?))
        {
            Type = type;
            ShiftId = shiftId;
            ShiftStart = shiftStart;
            ShiftEnd = shiftEnd;
            JobNames = jobNames;
            JobColor = jobColor;
            FixedShift = fixedShift;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets shift type status taking one of the values: Losing,
        /// Gaining or Normal
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets internal shift ID
        /// </summary>
        [JsonProperty(PropertyName = "shiftId")]
        public string ShiftId { get; set; }

        /// <summary>
        /// Gets or sets shift start time
        /// </summary>
        [JsonProperty(PropertyName = "shiftStart")]
        public System.DateTime? ShiftStart { get; set; }

        /// <summary>
        /// Gets or sets shift end time
        /// </summary>
        [JsonProperty(PropertyName = "shiftEnd")]
        public System.DateTime? ShiftEnd { get; set; }

        /// <summary>
        /// Gets or sets job Names separated by / if the shift is job transfers
        /// </summary>
        [JsonProperty(PropertyName = "jobNames")]
        public string JobNames { get; set; }

        /// <summary>
        /// Gets or sets job Color code
        /// </summary>
        [JsonProperty(PropertyName = "jobColor")]
        public string JobColor { get; set; }

        /// <summary>
        /// Gets or sets is Fixed shift
        /// </summary>
        [JsonProperty(PropertyName = "fixedShift")]
        public bool? FixedShift { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for SwapShiftRequestResource
    /// </summary>
    public partial class SwapShiftRequestResource
    {
        /// <summary>
        /// Initializes a new instance of the SwapShiftRequestResource class.
        /// </summary>
        public SwapShiftRequestResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SwapShiftRequestResource class.
        /// </summary>
        /// <param name="lostShift">Shift which is getting lost because of this
        /// operation</param>
        /// <param name="gainedShift">Shift which is gained because of this
        /// swap</param>
        public SwapShiftRequestResource(string swapRequestId = default(string), string swapperScheduledShiftId = default(string), string swappeeScheduledShiftId = default(string), string swappeeName = default(string), double? swapperNetWeeklyHoursDelta = default(double?), string startOfWeek = default(string), string requestStatus = default(string), SwapShiftResource lostShift = default(SwapShiftResource), SwapShiftResource gainedShift = default(SwapShiftResource))
        {
            SwapRequestId = swapRequestId;
            SwapperScheduledShiftId = swapperScheduledShiftId;
            SwappeeScheduledShiftId = swappeeScheduledShiftId;
            SwappeeName = swappeeName;
            SwapperNetWeeklyHoursDelta = swapperNetWeeklyHoursDelta;
            StartOfWeek = startOfWeek;
            RequestStatus = requestStatus;
            LostShift = lostShift;
            GainedShift = gainedShift;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "swapRequestId")]
        public string SwapRequestId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "swapperScheduledShiftId")]
        public string SwapperScheduledShiftId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "swappeeScheduledShiftId")]
        public string SwappeeScheduledShiftId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "swappeeName")]
        public string SwappeeName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "swapperNetWeeklyHoursDelta")]
        public double? SwapperNetWeeklyHoursDelta { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startOfWeek")]
        public string StartOfWeek { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "requestStatus")]
        public string RequestStatus { get; set; }

        /// <summary>
        /// Gets or sets shift which is getting lost because of this operation
        /// </summary>
        [JsonProperty(PropertyName = "lostShift")]
        public SwapShiftResource LostShift { get; set; }

        /// <summary>
        /// Gets or sets shift which is gained because of this swap
        /// </summary>
        [JsonProperty(PropertyName = "gainedShift")]
        public SwapShiftResource GainedShift { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for ShiftSwapResponse
    /// </summary>
    public partial class ShiftSwapResponse
    {
        /// <summary>
        /// Initializes a new instance of the ShiftSwapResponse class.
        /// </summary>
        public ShiftSwapResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ShiftSwapResponse class.
        /// </summary>
        public ShiftSwapResponse(IList<SwapShiftRequestResource> entities = default(IList<SwapShiftRequestResource>))
        {
            Entities = entities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entities")]
        public IList<SwapShiftRequestResource> Entities { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for ErrorResponse
    /// </summary>
    public partial class Error
    {
        /// <summary>
        /// Initializes a new instance of the Error class.
        /// </summary>
        public Error()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Error class.
        /// </summary>
        /// <param name="userMessage">Pass this message on to the app user if
        /// needed.</param>
        /// <param name="errorCode">unique.errorCode.perMessage</param>
        /// <param
        /// name="moreInfo">http://example.com/app/api/errors/unique.errorCode.perMessage</param>
        /// <param name="timestamp">ISO formatted datetime e.g.
        /// 2012-07-25T12:00:00Z</param>
        /// <param name="devMessage">Verbose, plain language description of the
        /// problem for the app developer with hints about how to fix
        /// it.</param>
        public Error(string userMessage = default(string), string errorCode = default(string), string moreInfo = default(string), System.DateTime? timestamp = default(System.DateTime?), object devMessage = default(object))
        {
            UserMessage = userMessage;
            ErrorCode = errorCode;
            MoreInfo = moreInfo;
            Timestamp = timestamp;
            DevMessage = devMessage;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets pass this message on to the app user if needed.
        /// </summary>
        [JsonProperty(PropertyName = "userMessage")]
        public string UserMessage { get; set; }

        /// <summary>
        /// Gets or sets unique.errorCode.perMessage
        /// </summary>
        [JsonProperty(PropertyName = "errorCode")]
        public string ErrorCode { get; set; }

        /// <summary>
        /// Gets or sets
        /// http://example.com/app/api/errors/unique.errorCode.perMessage
        /// </summary>
        [JsonProperty(PropertyName = "moreInfo")]
        public string MoreInfo { get; set; }

        /// <summary>
        /// Gets or sets ISO formatted datetime e.g. 2012-07-25T12:00:00Z
        /// </summary>
        [JsonProperty(PropertyName = "timestamp")]
        public System.DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or sets verbose, plain language description of the problem for
        /// the app developer with hints about how to fix it.
        /// </summary>
        [JsonProperty(PropertyName = "devMessage")]
        public object DevMessage { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for ErrorResponse
    /// </summary>
    public partial class ErrorResponse
    {
        /// <summary>
        /// Initializes a new instance of the ErrorResponse class.
        /// </summary>
        public ErrorResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ErrorResponse class.
        /// </summary>
        public ErrorResponse(string responseId = default(string), string timestamp = default(string), IList<Error> errors = default(IList<Error>))
        {
            ResponseId = responseId;
            Timestamp = timestamp;
            Errors = errors;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "responseId")]
        public string ResponseId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timestamp")]
        public string Timestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "errors")]
        public IList<Error> Errors { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for AssignOpenShiftRequest
    /// </summary>
    public partial class AssignOpenShiftRequest
    {
        /// <summary>
        /// Initializes a new instance of the AssignOpenShiftRequest class.
        /// </summary>
        public AssignOpenShiftRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AssignOpenShiftRequest class.
        /// </summary>
        public AssignOpenShiftRequest(int employeeId, int? scheduledShiftId = default(int?))
        {
            ScheduledShiftId = scheduledShiftId;
            EmployeeId = employeeId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "scheduledShiftId")]
        public int? ScheduledShiftId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "employeeId")]
        public int EmployeeId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for ResquestOpenShiftResponse
    /// </summary>
    public partial class RequestOpenShiftResponse
    {
        /// <summary>
        /// Initializes a new instance of the RequestOpenShiftResponse class.
        /// </summary>
        public RequestOpenShiftResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RequestOpenShiftResponse class.
        /// </summary>
        public RequestOpenShiftResponse(string shiftId = default(string), System.DateTime? start = default(System.DateTime?), System.DateTime? end = default(System.DateTime?), string jobNames = default(string), string siteName = default(string))
        {
            ShiftId = shiftId;
            Start = start;
            End = end;
            JobNames = jobNames;
            SiteName = siteName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "shiftId")]
        public string ShiftId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "start")]
        public System.DateTime? Start { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "end")]
        public System.DateTime? End { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "jobNames")]
        public string JobNames { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "siteName")]
        public string SiteName { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for MyAvailableShiftResource
    /// </summary>
    public partial class MyAvailableShiftResource
    {
        /// <summary>
        /// Initializes a new instance of the MyAvailableShiftResource class.
        /// </summary>
        public MyAvailableShiftResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MyAvailableShiftResource class.
        /// </summary>
        public MyAvailableShiftResource(string shiftId = default(string), System.DateTime? start = default(System.DateTime?), System.DateTime? end = default(System.DateTime?), string jobNames = default(string), string siteName = default(string))
        {
            ShiftId = shiftId;
            Start = start;
            End = end;
            JobNames = jobNames;
            SiteName = siteName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "shiftId")]
        public string ShiftId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "start")]
        public System.DateTime? Start { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "end")]
        public System.DateTime? End { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "jobNames")]
        public string JobNames { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "siteName")]
        public string SiteName { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for MyAvailableShiftsCollectionResource
    /// </summary>
    public partial class MyAvailableShiftsCollectionResource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MyAvailableShiftsCollectionResource class.
        /// </summary>
        public MyAvailableShiftsCollectionResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MyAvailableShiftsCollectionResource class.
        /// </summary>
        public MyAvailableShiftsCollectionResource(int? year = default(int?), int? month = default(int?), string scheduleRestrictionPolicyName = default(string), IList<MyAvailableShiftResource> entities = default(IList<MyAvailableShiftResource>))
        {
            Year = year;
            Month = month;
            ScheduleRestrictionPolicyName = scheduleRestrictionPolicyName;
            Entities = entities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "year")]
        public int? Year { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "month")]
        public int? Month { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "scheduleRestrictionPolicyName")]
        public string ScheduleRestrictionPolicyName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entities")]
        public IList<MyAvailableShiftResource> Entities { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for UserCollection
    /// </summary>
    public partial class UserCollection
    {
        /// <summary>
        /// Initializes a new instance of the UserCollection class.
        /// </summary>
        public UserCollection()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserCollection class.
        /// </summary>
        public UserCollection(IList<User> entities = default(IList<User>), IList<int?> userIds = default(IList<int?>))
        {
            Entities = entities;
            UserIds = userIds;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entities")]
        public IList<User> Entities { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userIds")]
        public IList<int?> UserIds { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for SwappableShiftResource
    /// </summary>
    /// <remarks>
    /// Swappable Shift Resource
    /// </remarks>
    public partial class SwappableShiftResource
    {
        /// <summary>
        /// Initializes a new instance of the SwappableShiftResource class.
        /// </summary>
        public SwappableShiftResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SwappableShiftResource class.
        /// </summary>
        public SwappableShiftResource(string employeeName = default(string), double? netHoursDelta = default(double?), string shiftId = default(string), System.DateTime? shiftStart = default(System.DateTime?), System.DateTime? shiftEnd = default(System.DateTime?), string jobNames = default(string), string jobColor = default(string), bool? fixedShift = default(bool?))
        {
            EmployeeName = employeeName;
            NetHoursDelta = netHoursDelta;
            ShiftId = shiftId;
            ShiftStart = shiftStart;
            ShiftEnd = shiftEnd;
            JobNames = jobNames;
            JobColor = jobColor;
            FixedShift = fixedShift;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "employeeName")]
        public string EmployeeName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "netHoursDelta")]
        public double? NetHoursDelta { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "shiftId")]
        public string ShiftId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "shiftStart")]
        public System.DateTime? ShiftStart { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "shiftEnd")]
        public System.DateTime? ShiftEnd { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "jobNames")]
        public string JobNames { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "jobColor")]
        public string JobColor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fixedShift")]
        public bool? FixedShift { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for SwappableShiftCollectionResponse
    /// </summary>
    /// <remarks>
    /// Provides eligible Shifts which can be swappable for the given scheduled
    /// shift Id
    /// </remarks>
    public partial class SwappableShiftCollectionResponse
    {
        /// <summary>
        /// Initializes a new instance of the SwappableShiftCollectionResponse
        /// class.
        /// </summary>
        public SwappableShiftCollectionResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SwappableShiftCollectionResponse
        /// class.
        /// </summary>
        public SwappableShiftCollectionResponse(string swapperShiftId = default(string), IList<SwappableShiftResource> entities = default(IList<SwappableShiftResource>))
        {
            SwapperShiftId = swapperShiftId;
            Entities = entities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "swapperShiftId")]
        public string SwapperShiftId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entities")]
        public IList<SwappableShiftResource> Entities { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for SwapShiftApprovalResource
    /// </summary>
    public partial class SwapShiftApprovalResource
    {
        /// <summary>
        /// Initializes a new instance of the SwapShiftApprovalResource class.
        /// </summary>
        public SwapShiftApprovalResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SwapShiftApprovalResource class.
        /// </summary>
        public SwapShiftApprovalResource(string swapShiftId = default(string), int? swappeeScheduledShiftId = default(int?), System.DateTime? requestedOn = default(System.DateTime?), System.DateTime? requestedFor = default(System.DateTime?), string statusCode = default(string))
        {
            SwapShiftId = swapShiftId;
            SwappeeScheduledShiftId = swappeeScheduledShiftId;
            RequestedOn = requestedOn;
            RequestedFor = requestedFor;
            StatusCode = statusCode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "swapShiftId")]
        public string SwapShiftId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "swappeeScheduledShiftId")]
        public int? SwappeeScheduledShiftId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "requestedOn")]
        public System.DateTime? RequestedOn { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "requestedFor")]
        public System.DateTime? RequestedFor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "statusCode")]
        public string StatusCode { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for SwapShiftApprovalResource
    /// </summary>
    public partial class SwapShiftApprovalCollectionResource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// SwapShiftApprovalCollectionResource class.
        /// </summary>
        public SwapShiftApprovalCollectionResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// SwapShiftApprovalCollectionResource class.
        /// </summary>
        public SwapShiftApprovalCollectionResource(IList<SwapShiftApprovalResource> entities = default(IList<SwapShiftApprovalResource>))
        {
            Entities = entities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entities")]
        public IList<SwapShiftApprovalResource> Entities { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for PendingApprovals
    /// </summary>
    public partial class PendingApprovals
    {
        /// <summary>
        /// Initializes a new instance of the PendingApprovals class.
        /// </summary>
        public PendingApprovals()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PendingApprovals class.
        /// </summary>
        public PendingApprovals(SwapShiftApprovalCollectionResource swapShiftApprovals = default(SwapShiftApprovalCollectionResource))
        {
            SwapShiftApprovals = swapShiftApprovals;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "swapShiftApprovals")]
        public SwapShiftApprovalCollectionResource SwapShiftApprovals { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for EmployeeNameResource
    /// </summary>
    public partial class EmployeeNameResource
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeNameResource class.
        /// </summary>
        public EmployeeNameResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeNameResource class.
        /// </summary>
        public EmployeeNameResource(string firstName = default(string), string lastName = default(string), string middleName = default(string), string nickName = default(string))
        {
            FirstName = firstName;
            LastName = lastName;
            MiddleName = middleName;
            NickName = nickName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nickName")]
        public string NickName { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for JobInfoResource
    /// </summary>
    public partial class JobInfoResource
    {
        /// <summary>
        /// Initializes a new instance of the JobInfoResource class.
        /// </summary>
        public JobInfoResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JobInfoResource class.
        /// </summary>
        public JobInfoResource(string id = default(string), string name = default(string))
        {
            Id = id;
            Name = name;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for ScheduleResource
    /// </summary>
    public partial class ScheduleResource
    {
        /// <summary>
        /// Initializes a new instance of the ScheduleResource class.
        /// </summary>
        public ScheduleResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScheduleResource class.
        /// </summary>
        /// <param name="scheduledShiftId">The ID of the scheduled
        /// shift</param>
        /// <param name="startsOn">The start date and time</param>
        /// <param name="endsOn">The end date and time</param>
        /// <param name="jobs">The collection of jobs associated with the
        /// schedule resource.</param>
        /// <param name="type">Allowed values: Losing, Gaining, Normal</param>
        public ScheduleResource(int? scheduledShiftId = default(int?), System.DateTime? startsOn = default(System.DateTime?), System.DateTime? endsOn = default(System.DateTime?), IList<JobInfoResource> jobs = default(IList<JobInfoResource>), string type = default(string))
        {
            ScheduledShiftId = scheduledShiftId;
            StartsOn = startsOn;
            EndsOn = endsOn;
            Jobs = jobs;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the ID of the scheduled shift
        /// </summary>
        [JsonProperty(PropertyName = "scheduledShiftId")]
        public int? ScheduledShiftId { get; set; }

        /// <summary>
        /// Gets or sets the start date and time
        /// </summary>
        [JsonProperty(PropertyName = "startsOn")]
        public System.DateTime? StartsOn { get; set; }

        /// <summary>
        /// Gets or sets the end date and time
        /// </summary>
        [JsonProperty(PropertyName = "endsOn")]
        public System.DateTime? EndsOn { get; set; }

        /// <summary>
        /// Gets or sets the collection of jobs associated with the schedule
        /// resource.
        /// </summary>
        [JsonProperty(PropertyName = "jobs")]
        public IList<JobInfoResource> Jobs { get; set; }

        /// <summary>
        /// Gets or sets allowed values: Losing, Gaining, Normal
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for SwappeeSwapperSummaryResource
    /// </summary>
    /// <remarks>
    /// The summary resource for a party to a swap request.
    /// </remarks>
    public partial class SwappeeSwapperSummaryResource
    {
        /// <summary>
        /// Initializes a new instance of the SwappeeSwapperSummaryResource
        /// class.
        /// </summary>
        public SwappeeSwapperSummaryResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SwappeeSwapperSummaryResource
        /// class.
        /// </summary>
        public SwappeeSwapperSummaryResource(int? employeeId = default(int?), EmployeeNameResource employeeName = default(EmployeeNameResource), double? netWeeklyTotalHoursChange = default(double?), double? netWeeklyTotalHours = default(double?), IList<ScheduleResource> schedule = default(IList<ScheduleResource>))
        {
            EmployeeId = employeeId;
            EmployeeName = employeeName;
            NetWeeklyTotalHoursChange = netWeeklyTotalHoursChange;
            NetWeeklyTotalHours = netWeeklyTotalHours;
            Schedule = schedule;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "employeeId")]
        public int? EmployeeId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "employeeName")]
        public EmployeeNameResource EmployeeName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "netWeeklyTotalHoursChange")]
        public double? NetWeeklyTotalHoursChange { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "netWeeklyTotalHours")]
        public double? NetWeeklyTotalHours { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "schedule")]
        public IList<ScheduleResource> Schedule { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for ApproveShiftSwapResponse
    /// </summary>
    public partial class SwapShiftSummaryResource
    {
        /// <summary>
        /// Initializes a new instance of the SwapShiftSummaryResource class.
        /// </summary>
        public SwapShiftSummaryResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SwapShiftSummaryResource class.
        /// </summary>
        /// <param name="swapShiftId">The ID of the swap request.</param>
        /// <param name="swappeeScheduledShiftId">The ID of the swappee's shift
        /// involved in the swap.</param>
        /// <param name="requestedOn">The date and time the swap shift request
        /// was created.</param>
        /// <param name="requestedFor">The date and time the swap was requested
        /// for.</param>
        /// <param name="statusCode">The status of the swap request.</param>
        /// <param name="requestor">The requestor party to the swap
        /// request.</param>
        /// <param name="swappee">The swappee party to the swap
        /// request.</param>
        public SwapShiftSummaryResource(int? swapShiftId = default(int?), int? swappeeScheduledShiftId = default(int?), System.DateTime? requestedOn = default(System.DateTime?), System.DateTime? requestedFor = default(System.DateTime?), string statusCode = default(string), SwappeeSwapperSummaryResource requestor = default(SwappeeSwapperSummaryResource), SwappeeSwapperSummaryResource swappee = default(SwappeeSwapperSummaryResource))
        {
            SwapShiftId = swapShiftId;
            SwappeeScheduledShiftId = swappeeScheduledShiftId;
            RequestedOn = requestedOn;
            RequestedFor = requestedFor;
            StatusCode = statusCode;
            Requestor = requestor;
            Swappee = swappee;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the ID of the swap request.
        /// </summary>
        [JsonProperty(PropertyName = "swapShiftId")]
        public int? SwapShiftId { get; set; }

        /// <summary>
        /// Gets or sets the ID of the swappee's shift involved in the swap.
        /// </summary>
        [JsonProperty(PropertyName = "swappeeScheduledShiftId")]
        public int? SwappeeScheduledShiftId { get; set; }

        /// <summary>
        /// Gets or sets the date and time the swap shift request was created.
        /// </summary>
        [JsonProperty(PropertyName = "requestedOn")]
        public System.DateTime? RequestedOn { get; set; }

        /// <summary>
        /// Gets or sets the date and time the swap was requested for.
        /// </summary>
        [JsonProperty(PropertyName = "requestedFor")]
        public System.DateTime? RequestedFor { get; set; }

        /// <summary>
        /// Gets or sets the status of the swap request.
        /// </summary>
        [JsonProperty(PropertyName = "statusCode")]
        public string StatusCode { get; set; }

        /// <summary>
        /// Gets or sets the requestor party to the swap request.
        /// </summary>
        [JsonProperty(PropertyName = "requestor")]
        public SwappeeSwapperSummaryResource Requestor { get; set; }

        /// <summary>
        /// Gets or sets the swappee party to the swap request.
        /// </summary>
        [JsonProperty(PropertyName = "swappee")]
        public SwappeeSwapperSummaryResource Swappee { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for EmployeeInfo
    /// </summary>
    public partial class EmployeeInfo
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeInfo class.
        /// </summary>
        public EmployeeInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeInfo class.
        /// </summary>
        public EmployeeInfo(string employeeId, string loginName, string lastName = default(string), string middleName = default(string), string firstName = default(string), string nickName = default(string), string suffix = default(string), string badgeNumber = default(string))
        {
            EmployeeId = employeeId;
            LastName = lastName;
            MiddleName = middleName;
            FirstName = firstName;
            NickName = nickName;
            Suffix = suffix;
            LoginName = loginName;
            BadgeNumber = badgeNumber;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "employeeId")]
        public string EmployeeId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nickName")]
        public string NickName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "suffix")]
        public string Suffix { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "loginName")]
        public string LoginName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "badgeNumber")]
        public string BadgeNumber { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (EmployeeId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EmployeeId");
            }
            if (LoginName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LoginName");
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for SiteInfo
    /// </summary>
    public partial class SiteInfo
    {
        /// <summary>
        /// Initializes a new instance of the SiteInfo class.
        /// </summary>
        public SiteInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SiteInfo class.
        /// </summary>
        public SiteInfo(string siteId, string siteCode, string longName = default(string), string startDayOfLaborWeek = default(string), System.DateTime? effectiveStartOfWeek = default(System.DateTime?))
        {
            SiteId = siteId;
            SiteCode = siteCode;
            LongName = longName;
            StartDayOfLaborWeek = startDayOfLaborWeek;
            EffectiveStartOfWeek = effectiveStartOfWeek;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "siteId")]
        public string SiteId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "siteCode")]
        public string SiteCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "longName")]
        public string LongName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startDayOfLaborWeek")]
        public string StartDayOfLaborWeek { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "effectiveStartOfWeek")]
        public System.DateTime? EffectiveStartOfWeek { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SiteId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SiteId");
            }
            if (SiteCode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SiteCode");
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for DepartmentBySiteCollection
    /// </summary>
    public partial class DepartmentCollection
    {
        /// <summary>
        /// Initializes a new instance of the DepartmentCollection class.
        /// </summary>
        public DepartmentCollection()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DepartmentCollection class.
        /// </summary>
        public DepartmentCollection(int? siteId = default(int?), IList<Department> entities = default(IList<Department>))
        {
            SiteId = siteId;
            Entities = entities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "siteId")]
        public int? SiteId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entities")]
        public IList<Department> Entities { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for JobCollection
    /// </summary>
    public partial class JobCollection
    {
        /// <summary>
        /// Initializes a new instance of the JobCollection class.
        /// </summary>
        public JobCollection()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JobCollection class.
        /// </summary>
        public JobCollection(int? siteId = default(int?), IList<Job> entities = default(IList<Job>))
        {
            SiteId = siteId;
            Entities = entities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "siteId")]
        public int? SiteId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entities")]
        public IList<Job> Entities { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for TimeZoneCollectionResource
    /// </summary>
    public partial class TimeZoneCollectionResource
    {
        /// <summary>
        /// Initializes a new instance of the TimeZoneCollectionResource class.
        /// </summary>
        public TimeZoneCollectionResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TimeZoneCollectionResource class.
        /// </summary>
        public TimeZoneCollectionResource(IList<SiteTimeZone> entities = default(IList<SiteTimeZone>))
        {
            Entities = entities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entities")]
        public IList<SiteTimeZone> Entities { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for SiteCollectionResource
    /// </summary>
    public partial class SiteCollectionResource
    {
        /// <summary>
        /// Initializes a new instance of the SiteCollectionResource class.
        /// </summary>
        public SiteCollectionResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SiteCollectionResource class.
        /// </summary>
        public SiteCollectionResource(IList<Site> entities = default(IList<Site>))
        {
            Entities = entities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entities")]
        public IList<Site> Entities { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for SwapShiftRequestCollectionResource
    /// </summary>
    /// <remarks>
    /// A collection of swap shift requests.
    /// </remarks>
    public partial class SwapShiftRequestCollectionResource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// SwapShiftRequestCollectionResource class.
        /// </summary>
        public SwapShiftRequestCollectionResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// SwapShiftRequestCollectionResource class.
        /// </summary>
        public SwapShiftRequestCollectionResource(IList<SwapShiftRequestResource> entities)
        {
            Entities = entities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entities")]
        public IList<SwapShiftRequestResource> Entities { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Entities == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Entities");
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for TimeOffAuditEntryResource
    /// </summary>
    public partial class TimeOffAuditEntryResource
    {
        /// <summary>
        /// Initializes a new instance of the TimeOffAuditEntryResource class.
        /// </summary>
        public TimeOffAuditEntryResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TimeOffAuditEntryResource class.
        /// </summary>
        public TimeOffAuditEntryResource(System.DateTime? timestamp = default(System.DateTime?), string comment = default(string), string authorLastName = default(string), string authorFirstName = default(string), string statusCode = default(string))
        {
            Timestamp = timestamp;
            Comment = comment;
            AuthorLastName = authorLastName;
            AuthorFirstName = authorFirstName;
            StatusCode = statusCode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timestamp")]
        public System.DateTime? Timestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "comment")]
        public string Comment { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "authorLastName")]
        public string AuthorLastName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "authorFirstName")]
        public string AuthorFirstName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "statusCode")]
        public string StatusCode { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for TimeOffRequestDetailResource
    /// </summary>
    public partial class TimeOffRequestDetailResource
    {
        /// <summary>
        /// Initializes a new instance of the TimeOffRequestDetailResource
        /// class.
        /// </summary>
        public TimeOffRequestDetailResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TimeOffRequestDetailResource
        /// class.
        /// </summary>
        /// <param name="timeOffRequestDetailId">The system generated time off
        /// request's internal Id</param>
        /// <param name="timeOffTypeId">The time off type's internal IdThe time
        /// off type's internal Id</param>
        /// <param name="date">The time off request detail's effective
        /// date</param>
        /// <param name="hours">The hours requested for the time off request
        /// detail</param>
        /// <param name="payCategoryId">The pay category's internal Id with
        /// which category pay adjustments should be processed. If not
        /// provided, then the default pay category is selected for paid time
        /// off.</param>
        public TimeOffRequestDetailResource(int? timeOffRequestDetailId = default(int?), int? timeOffTypeId = default(int?), System.DateTime? date = default(System.DateTime?), double? hours = default(double?), int? payCategoryId = default(int?))
        {
            TimeOffRequestDetailId = timeOffRequestDetailId;
            TimeOffTypeId = timeOffTypeId;
            Date = date;
            Hours = hours;
            PayCategoryId = payCategoryId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the system generated time off request's internal Id
        /// </summary>
        [JsonProperty(PropertyName = "timeOffRequestDetailId")]
        public int? TimeOffRequestDetailId { get; set; }

        /// <summary>
        /// Gets or sets the time off type's internal IdThe time off type's
        /// internal Id
        /// </summary>
        [JsonProperty(PropertyName = "timeOffTypeId")]
        public int? TimeOffTypeId { get; set; }

        /// <summary>
        /// Gets or sets the time off request detail's effective date
        /// </summary>
        [JsonProperty(PropertyName = "date")]
        public System.DateTime? Date { get; set; }

        /// <summary>
        /// Gets or sets the hours requested for the time off request detail
        /// </summary>
        [JsonProperty(PropertyName = "hours")]
        public double? Hours { get; set; }

        /// <summary>
        /// Gets or sets the pay category's internal Id with which category pay
        /// adjustments should be processed. If not provided, then the default
        /// pay category is selected for paid time off.
        /// </summary>
        [JsonProperty(PropertyName = "payCategoryId")]
        public int? PayCategoryId { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for TimeOffRequestResource
    /// </summary>
    public partial class TimeOffRequestResource
    {
        /// <summary>
        /// Initializes a new instance of the TimeOffRequestResource class.
        /// </summary>
        public TimeOffRequestResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TimeOffRequestResource class.
        /// </summary>
        /// <param name="timeOffTypeId">The time off type's internal Id</param>
        /// <param name="employeeId">The employee's internal Id</param>
        /// <param name="status">The time off request's status. Allowed values:
        /// Pending, Approved, Denied, Cancelled</param>
        /// <param name="start">The time off request's effective start
        /// time</param>
        /// <param name="end">The time off request's effective end time</param>
        /// <param name="timeOffRequestId">The system generated time off
        /// request's internal Id</param>
        /// <param name="details">List of TimeOffRequestDetailResource</param>
        /// <param name="comments">The time off request's comments</param>
        /// <param name="hoursRequested">The sum of the detail's hours.</param>
        public TimeOffRequestResource(int timeOffTypeId, int employeeId, string status, System.DateTime start, System.DateTime end, int? timeOffRequestId = default(int?), IList<TimeOffRequestDetailResource> details = default(IList<TimeOffRequestDetailResource>), string comments = default(string), double? hoursRequested = default(double?))
        {
            TimeOffRequestId = timeOffRequestId;
            TimeOffTypeId = timeOffTypeId;
            EmployeeId = employeeId;
            Status = status;
            Start = start;
            End = end;
            Details = details;
            Comments = comments;
            HoursRequested = hoursRequested;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the system generated time off request's internal Id
        /// </summary>
        [JsonProperty(PropertyName = "timeOffRequestId")]
        public int? TimeOffRequestId { get; set; }

        /// <summary>
        /// Gets or sets the time off type's internal Id
        /// </summary>
        [JsonProperty(PropertyName = "timeOffTypeId")]
        public int TimeOffTypeId { get; set; }

        /// <summary>
        /// Gets or sets the employee's internal Id
        /// </summary>
        [JsonProperty(PropertyName = "employeeId")]
        public int EmployeeId { get; set; }

        /// <summary>
        /// Gets or sets the time off request's status. Allowed values:
        /// Pending, Approved, Denied, Cancelled
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the time off request's effective start time
        /// </summary>
        [JsonProperty(PropertyName = "start")]
        public System.DateTime Start { get; set; }

        /// <summary>
        /// Gets or sets the time off request's effective end time
        /// </summary>
        [JsonProperty(PropertyName = "end")]
        public System.DateTime End { get; set; }

        /// <summary>
        /// Gets or sets list of TimeOffRequestDetailResource
        /// </summary>
        [JsonProperty(PropertyName = "details")]
        public IList<TimeOffRequestDetailResource> Details { get; set; }

        /// <summary>
        /// Gets or sets the time off request's comments
        /// </summary>
        [JsonProperty(PropertyName = "comments")]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or sets the sum of the detail's hours.
        /// </summary>
        [JsonProperty(PropertyName = "hoursRequested")]
        public double? HoursRequested { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class TimeOffRequestCollectionResource
    {
        /// <summary>
        /// Initializes a new instance of the TimeOffRequestCollectionResource
        /// class.
        /// </summary>
        public TimeOffRequestCollectionResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TimeOffRequestCollectionResource
        /// class.
        /// </summary>
        public TimeOffRequestCollectionResource(IList<TimeOffRequestResource> entities = default(IList<TimeOffRequestResource>))
        {
            Entities = entities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entities")]
        public IList<TimeOffRequestResource> Entities { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for TimeOffRequestDetail
    /// </summary>
    public partial class TimeOffDetailEntryResource
    {
        /// <summary>
        /// Initializes a new instance of the TimeOffDetailEntryResource class.
        /// </summary>
        public TimeOffDetailEntryResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TimeOffDetailEntryResource class.
        /// </summary>
        public TimeOffDetailEntryResource(int? timeOffRequestDetailId = default(int?), System.DateTime? date = default(System.DateTime?), int? payAdjustmentId = default(int?), int? payRuleId = default(int?), int? categoryDefinitionId = default(int?), double? paidHours = default(double?))
        {
            TimeOffRequestDetailId = timeOffRequestDetailId;
            Date = date;
            PayAdjustmentId = payAdjustmentId;
            PayRuleId = payRuleId;
            CategoryDefinitionId = categoryDefinitionId;
            PaidHours = paidHours;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timeOffRequestDetailId")]
        public int? TimeOffRequestDetailId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "date")]
        public System.DateTime? Date { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "payAdjustmentId")]
        public int? PayAdjustmentId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "payRuleId")]
        public int? PayRuleId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "categoryDefinitionId")]
        public int? CategoryDefinitionId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "paidHours")]
        public double? PaidHours { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for TimeOffRequest
    /// </summary>
    public partial class EmployeeTimeOffResource
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeTimeOffResource class.
        /// </summary>
        public EmployeeTimeOffResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeTimeOffResource class.
        /// </summary>
        public EmployeeTimeOffResource(int typeId, int? timeOffRequestId = default(int?), int? employeeId = default(int?), string siteId = default(string), System.DateTime? start = default(System.DateTime?), System.DateTime? end = default(System.DateTime?), string typeName = default(string), double? paidHours = default(double?), string statusCode = default(string), IList<TimeOffDetailEntryResource> timeOffDetails = default(IList<TimeOffDetailEntryResource>), string comment = default(string), IList<TimeOffAuditEntryResource> timeOffAudits = default(IList<TimeOffAuditEntryResource>), EmployeeNameResource employeeName = default(EmployeeNameResource), bool? halfDay = default(bool?))
        {
            TimeOffRequestId = timeOffRequestId;
            EmployeeId = employeeId;
            SiteId = siteId;
            Start = start;
            End = end;
            TypeId = typeId;
            TypeName = typeName;
            PaidHours = paidHours;
            StatusCode = statusCode;
            TimeOffDetails = timeOffDetails;
            Comment = comment;
            TimeOffAudits = timeOffAudits;
            EmployeeName = employeeName;
            HalfDay = halfDay;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timeOffRequestId")]
        public int? TimeOffRequestId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "employeeId")]
        public int? EmployeeId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "siteId")]
        public string SiteId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "start")]
        public System.DateTime? Start { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "end")]
        public System.DateTime? End { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "typeId")]
        public int TypeId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "typeName")]
        public string TypeName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "paidHours")]
        public double? PaidHours { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "statusCode")]
        public string StatusCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timeOffDetails")]
        public IList<TimeOffDetailEntryResource> TimeOffDetails { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "comment")]
        public string Comment { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timeOffAudits")]
        public IList<TimeOffAuditEntryResource> TimeOffAudits { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "employeeName")]
        public EmployeeNameResource EmployeeName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "halfDay")]
        public bool? HalfDay { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for ShiftOffer
    /// </summary>
    public partial class ShiftOfferResource
    {
        /// <summary>
        /// Initializes a new instance of the ShiftOfferResource class.
        /// </summary>
        public ShiftOfferResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ShiftOfferResource class.
        /// </summary>
        public ShiftOfferResource(string shiftId = default(string), bool? isShiftOffered = default(bool?), string siteName = default(string), string jobName = default(string), System.DateTime? shiftStart = default(System.DateTime?), System.DateTime? shiftEnd = default(System.DateTime?))
        {
            ShiftId = shiftId;
            IsShiftOffered = isShiftOffered;
            SiteName = siteName;
            JobName = jobName;
            ShiftStart = shiftStart;
            ShiftEnd = shiftEnd;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "shiftId")]
        public string ShiftId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isShiftOffered")]
        public bool? IsShiftOffered { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "siteName")]
        public string SiteName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "jobName")]
        public string JobName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "shiftStart")]
        public System.DateTime? ShiftStart { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "shiftEnd")]
        public System.DateTime? ShiftEnd { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for ShiftOfferCollection
    /// </summary>
    public partial class ShiftOffersCollectionResource
    {
        /// <summary>
        /// Initializes a new instance of the ShiftOffersCollectionResource
        /// class.
        /// </summary>
        public ShiftOffersCollectionResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ShiftOffersCollectionResource
        /// class.
        /// </summary>
        public ShiftOffersCollectionResource(System.DateTime? calendarDate = default(System.DateTime?), IList<ShiftOfferResource> entities = default(IList<ShiftOfferResource>))
        {
            CalendarDate = calendarDate;
            Entities = entities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "calendarDate")]
        public System.DateTime? CalendarDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entities")]
        public IList<ShiftOfferResource> Entities { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for EmployeeAvailability
    /// </summary>
    public partial class EmployeeAvailabilityResource
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeAvailabilityResource
        /// class.
        /// </summary>
        public EmployeeAvailabilityResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeAvailabilityResource
        /// class.
        /// </summary>
        public EmployeeAvailabilityResource(System.DateTime effectiveFrom, int numberOfWeeks, System.DateTime cycleBaseDate, IList<GeneralAvailability> generalAvailability, int employeeId, int? id = default(int?), System.DateTime? endsAfter = default(System.DateTime?), IList<object> preferredAvailability = default(IList<object>), IList<object> fixedShifts = default(IList<object>))
        {
            Id = id;
            EffectiveFrom = effectiveFrom;
            EndsAfter = endsAfter;
            NumberOfWeeks = numberOfWeeks;
            CycleBaseDate = cycleBaseDate;
            GeneralAvailability = generalAvailability;
            PreferredAvailability = preferredAvailability;
            FixedShifts = fixedShifts;
            EmployeeId = employeeId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "effectiveFrom")]
        public System.DateTime EffectiveFrom { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "endsAfter")]
        public System.DateTime? EndsAfter { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "numberOfWeeks")]
        public int NumberOfWeeks { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cycleBaseDate")]
        public System.DateTime CycleBaseDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "generalAvailability")]
        public IList<GeneralAvailability> GeneralAvailability { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "preferredAvailability")]
        public IList<object> PreferredAvailability { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fixedShifts")]
        public IList<object> FixedShifts { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "employeeId")]
        public int EmployeeId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (GeneralAvailability == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "GeneralAvailability");
            }
            if (GeneralAvailability != null)
            {
                foreach (var element in GeneralAvailability)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for EmployeeAvailabilityResponse
    /// </summary>
    public partial class EmployeeAvailabilityCollectionResource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// EmployeeAvailabilityCollectionResource class.
        /// </summary>
        public EmployeeAvailabilityCollectionResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// EmployeeAvailabilityCollectionResource class.
        /// </summary>
        public EmployeeAvailabilityCollectionResource(int employeeId, IList<EmployeeAvailabilityResource> entities = default(IList<EmployeeAvailabilityResource>))
        {
            Entities = entities;
            EmployeeId = employeeId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entities")]
        public IList<EmployeeAvailabilityResource> Entities { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "employeeId")]
        public int EmployeeId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Entities != null)
            {
                foreach (var element in Entities)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for EmployeeDateEffectiveSummary
    /// </summary>
    public partial class EmployeeDateEffectiveSummary
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeDateEffectiveSummary
        /// class.
        /// </summary>
        public EmployeeDateEffectiveSummary()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeDateEffectiveSummary
        /// class.
        /// </summary>
        public EmployeeDateEffectiveSummary(bool? isMinor = default(bool?), bool? isBorrowed = default(bool?), bool? isScheduled = default(bool?))
        {
            IsMinor = isMinor;
            IsBorrowed = isBorrowed;
            IsScheduled = isScheduled;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isMinor")]
        public bool? IsMinor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isBorrowed")]
        public bool? IsBorrowed { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isScheduled")]
        public bool? IsScheduled { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for SchedulingEmployeeResource
    /// </summary>
    public partial class SchedulingEmployeeResource
    {
        /// <summary>
        /// Initializes a new instance of the SchedulingEmployeeResource class.
        /// </summary>
        public SchedulingEmployeeResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SchedulingEmployeeResource class.
        /// </summary>
        public SchedulingEmployeeResource(string badgeNumber, string firstName, string lastName, EmployeeDateEffectiveSummary dateEffectiveSummary = default(EmployeeDateEffectiveSummary), string id = default(string), string middleName = default(string), string displayName = default(string))
        {
            DateEffectiveSummary = dateEffectiveSummary;
            Id = id;
            BadgeNumber = badgeNumber;
            FirstName = firstName;
            LastName = lastName;
            MiddleName = middleName;
            DisplayName = displayName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dateEffectiveSummary")]
        public EmployeeDateEffectiveSummary DateEffectiveSummary { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "badgeNumber")]
        public string BadgeNumber { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (BadgeNumber == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BadgeNumber");
            }
            if (FirstName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FirstName");
            }
            if (LastName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LastName");
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for SchedulingEmployeeCollectionResource
    /// </summary>
    public partial class SchedulingEmployeeCollectionResource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// SchedulingEmployeeCollectionResource class.
        /// </summary>
        public SchedulingEmployeeCollectionResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// SchedulingEmployeeCollectionResource class.
        /// </summary>
        public SchedulingEmployeeCollectionResource(string siteId = default(string), System.DateTime? startOfLaborWeek = default(System.DateTime?), IList<SchedulingEmployeeResource> entities = default(IList<SchedulingEmployeeResource>))
        {
            SiteId = siteId;
            StartOfLaborWeek = startOfLaborWeek;
            Entities = entities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "siteId")]
        public string SiteId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startOfLaborWeek")]
        public System.DateTime? StartOfLaborWeek { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entities")]
        public IList<SchedulingEmployeeResource> Entities { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for AlternativeErrorResponse
    /// </summary>
    public partial class AlternativeErrorResponse
    {
        /// <summary>
        /// Initializes a new instance of the AlternativeErrorResponse class.
        /// </summary>
        public AlternativeErrorResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AlternativeErrorResponse class.
        /// </summary>
        public AlternativeErrorResponse(string errorInstanceId = default(string), string userMessage = default(string), string errorCode = default(string), string timestamp = default(string), string moreInfo = default(string), object devMessage = default(object))
        {
            ErrorInstanceId = errorInstanceId;
            UserMessage = userMessage;
            ErrorCode = errorCode;
            Timestamp = timestamp;
            MoreInfo = moreInfo;
            DevMessage = devMessage;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "errorInstanceId")]
        public string ErrorInstanceId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userMessage")]
        public string UserMessage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "errorCode")]
        public string ErrorCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timestamp")]
        public string Timestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "moreInfo")]
        public string MoreInfo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "devMessage")]
        public object DevMessage { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for AdjustmentCategoryResource
    /// </summary>
    public partial class AdjustmentCategoryResource
    {
        /// <summary>
        /// Initializes a new instance of the AdjustmentCategoryResource class.
        /// </summary>
        public AdjustmentCategoryResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AdjustmentCategoryResource class.
        /// </summary>
        public AdjustmentCategoryResource(string adjustmentCategoryId = default(string), string name = default(string), string adjustmentCategoryType = default(string), bool? isTrackedInAccruals = default(bool?), bool? availableInSingleUserMode = default(bool?), bool? allowZeroValues = default(bool?), string accumulatorHoursCode = default(string), int? sequenceNumber = default(int?), int? errorThreshold = default(int?), int? warningThreshold = default(int?), double? defaultHours = default(double?), string alternateAccrualAdjustmentCategoryId = default(string), string alternateAccrualAdjustmentCategoryName = default(string), bool? isTrackedAsWholeDays = default(bool?), bool? trackApprovedAccrualUsage = default(bool?), bool? subtractApprovedTimeOffFromWeeklyMinMax = default(bool?), bool? useAccumulatorForPay = default(bool?), string payAccumulatorId = default(string), string payAccumulatorName = default(string), bool? includeInWorkedHoursAccrual = default(bool?), bool? blockScheduleFlag = default(bool?), bool? enforceScheduleAndPreferredAvailabilty = default(bool?), bool? validateGeneralAvailability = default(bool?), string summaryCode1 = default(string), string summaryCode2 = default(string))
        {
            AdjustmentCategoryId = adjustmentCategoryId;
            Name = name;
            AdjustmentCategoryType = adjustmentCategoryType;
            IsTrackedInAccruals = isTrackedInAccruals;
            AvailableInSingleUserMode = availableInSingleUserMode;
            AllowZeroValues = allowZeroValues;
            AccumulatorHoursCode = accumulatorHoursCode;
            SequenceNumber = sequenceNumber;
            ErrorThreshold = errorThreshold;
            WarningThreshold = warningThreshold;
            DefaultHours = defaultHours;
            AlternateAccrualAdjustmentCategoryId = alternateAccrualAdjustmentCategoryId;
            AlternateAccrualAdjustmentCategoryName = alternateAccrualAdjustmentCategoryName;
            IsTrackedAsWholeDays = isTrackedAsWholeDays;
            TrackApprovedAccrualUsage = trackApprovedAccrualUsage;
            SubtractApprovedTimeOffFromWeeklyMinMax = subtractApprovedTimeOffFromWeeklyMinMax;
            UseAccumulatorForPay = useAccumulatorForPay;
            PayAccumulatorId = payAccumulatorId;
            PayAccumulatorName = payAccumulatorName;
            IncludeInWorkedHoursAccrual = includeInWorkedHoursAccrual;
            BlockScheduleFlag = blockScheduleFlag;
            EnforceScheduleAndPreferredAvailabilty = enforceScheduleAndPreferredAvailabilty;
            ValidateGeneralAvailability = validateGeneralAvailability;
            SummaryCode1 = summaryCode1;
            SummaryCode2 = summaryCode2;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "adjustmentCategoryId")]
        public string AdjustmentCategoryId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "adjustmentCategoryType")]
        public string AdjustmentCategoryType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isTrackedInAccruals")]
        public bool? IsTrackedInAccruals { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "availableInSingleUserMode")]
        public bool? AvailableInSingleUserMode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "allowZeroValues")]
        public bool? AllowZeroValues { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "accumulatorHoursCode")]
        public string AccumulatorHoursCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sequenceNumber")]
        public int? SequenceNumber { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "errorThreshold")]
        public int? ErrorThreshold { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "warningThreshold")]
        public int? WarningThreshold { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "defaultHours")]
        public double? DefaultHours { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "alternateAccrualAdjustmentCategoryId")]
        public string AlternateAccrualAdjustmentCategoryId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "alternateAccrualAdjustmentCategoryName")]
        public string AlternateAccrualAdjustmentCategoryName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isTrackedAsWholeDays")]
        public bool? IsTrackedAsWholeDays { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "trackApprovedAccrualUsage")]
        public bool? TrackApprovedAccrualUsage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "subtractApprovedTimeOffFromWeeklyMinMax")]
        public bool? SubtractApprovedTimeOffFromWeeklyMinMax { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "useAccumulatorForPay")]
        public bool? UseAccumulatorForPay { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "payAccumulatorId")]
        public string PayAccumulatorId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "payAccumulatorName")]
        public string PayAccumulatorName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "includeInWorkedHoursAccrual")]
        public bool? IncludeInWorkedHoursAccrual { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "blockScheduleFlag")]
        public bool? BlockScheduleFlag { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "enforceScheduleAndPreferredAvailabilty")]
        public bool? EnforceScheduleAndPreferredAvailabilty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "validateGeneralAvailability")]
        public bool? ValidateGeneralAvailability { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "summaryCode1")]
        public string SummaryCode1 { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "summaryCode2")]
        public string SummaryCode2 { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for AdjustmentCategoryCollectionResource
    /// </summary>
    public partial class AdjustmentCategoryCollectionResource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// AdjustmentCategoryCollectionResource class.
        /// </summary>
        public AdjustmentCategoryCollectionResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// AdjustmentCategoryCollectionResource class.
        /// </summary>
        public AdjustmentCategoryCollectionResource(IList<AdjustmentCategoryResource> entities = default(IList<AdjustmentCategoryResource>))
        {
            Entities = entities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entities")]
        public IList<AdjustmentCategoryResource> Entities { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for EmployeeScheduledShiftCollectionResource
    /// </summary>
    public partial class EmployeeScheduledShiftCollectionResource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// EmployeeScheduledShiftCollectionResource class.
        /// </summary>
        public EmployeeScheduledShiftCollectionResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// EmployeeScheduledShiftCollectionResource class.
        /// </summary>
        public EmployeeScheduledShiftCollectionResource(int? employeeId = default(int?), System.DateTime? businessDate = default(System.DateTime?), IList<ScheduledShift> entities = default(IList<ScheduledShift>))
        {
            EmployeeId = employeeId;
            BusinessDate = businessDate;
            Entities = entities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "employeeId")]
        public int? EmployeeId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "businessDate")]
        public System.DateTime? BusinessDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entities")]
        public IList<ScheduledShift> Entities { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Root Type for PayPeriodConfigurationResource
    /// </summary>
    public partial class PayPeriodConfigurationResource
    {
        /// <summary>
        /// Initializes a new instance of the PayPeriodConfigurationResource
        /// class.
        /// </summary>
        public PayPeriodConfigurationResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PayPeriodConfigurationResource
        /// class.
        /// </summary>
        public PayPeriodConfigurationResource(int? id = default(int?), bool? adjustPayForDaylightaSavingsTime = default(bool?), string costAllocation = default(string), System.DateTime? effectiveTimestamp = default(System.DateTime?), System.DateTime? endTimestamp = default(System.DateTime?), int? laborStartTimeMinutesFromMidnight = default(int?), bool? dayCut = default(bool?), string payPeriodAssignmentType = default(string), string startOfLaborWeek = default(string))
        {
            Id = id;
            AdjustPayForDaylightaSavingsTime = adjustPayForDaylightaSavingsTime;
            CostAllocation = costAllocation;
            EffectiveTimestamp = effectiveTimestamp;
            EndTimestamp = endTimestamp;
            LaborStartTimeMinutesFromMidnight = laborStartTimeMinutesFromMidnight;
            DayCut = dayCut;
            PayPeriodAssignmentType = payPeriodAssignmentType;
            StartOfLaborWeek = startOfLaborWeek;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "adjustPayForDaylightaSavingsTime")]
        public bool? AdjustPayForDaylightaSavingsTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "costAllocation")]
        public string CostAllocation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "effectiveTimestamp")]
        public System.DateTime? EffectiveTimestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "endTimestamp")]
        public System.DateTime? EndTimestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "laborStartTimeMinutesFromMidnight")]
        public int? LaborStartTimeMinutesFromMidnight { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dayCut")]
        public bool? DayCut { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "payPeriodAssignmentType")]
        public string PayPeriodAssignmentType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startOfLaborWeek")]
        public string StartOfLaborWeek { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WfmTeams.Connector.BlueYonder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class EmployeeTimeOffCollectionResource
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeTimeOffCollectionResource
        /// class.
        /// </summary>
        public EmployeeTimeOffCollectionResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeTimeOffCollectionResource
        /// class.
        /// </summary>
        public EmployeeTimeOffCollectionResource(IList<EmployeeTimeOffResource> entities = default(IList<EmployeeTimeOffResource>))
        {
            Entities = entities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entities")]
        public IList<EmployeeTimeOffResource> Entities { get; set; }

    }
}
